{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents Python Questions Theoratical Coding SQL Questions Theoratical Coding DevOps Questions","title":"HOME"},{"location":"#table-of-contents","text":"Python Questions Theoratical Coding SQL Questions Theoratical Coding DevOps Questions","title":"Table of Contents"},{"location":"amazon_web_services/","text":"AWS Interview Questions 1. What is Region & Availability Zones ? AWS has the concept of a Region, which is a physical location around the world where they cluster data centers. They call each group of logical data centers an Availability Zone Each AWS region consists of multiple, isolated, and physically seperate AZs within a geographic area. TIP: Edge location > Availability Zones > Regions 2. What is Edge Locations An Edge Location is where end-users access services located at AWS, the cloud computing division of US-Headquartered Amazon. They are located in most of the major cities around the world and are specifically used by CloudFront(CDN) to distribute content to end-users to reduce latency. 3. What are the AWS Core Services ? IAM EC2 EBS VPC RDS S3 ECS Lambda CloudFront CloudWatch SES SNS SQS DevOps tools (CodePipeline + CodeCommit + CodeBuild + CodeDeploy) 4. What is EC2(Elastic Cloud Storage) ? EC2, a Virtual Machine in the cloud on which you have OS-level control. You can run this cloud server whenever you want and can be used when you need to deploy your own servers in the cloud, similar to your on-premises servers, and when you want to have full control over the choice of hardware and the updates on the machine. 5. What are key-pairs in AWS? Key-pairs are secure login information for your virtual machines. To connect to the instances, you can use key-pairs which contain a public-key and private-key. 6. What is VPC? VPC stands for Virtual Private Cloud. It allows you to customize your networking configuration. It is a network which is logically isolated from another network in the cloud. It allows you to have your IP address range, internet gateways, subnet, and security groups. 7. What is meant by subnet? A large section of IP Addresses divided into chunks is known as subnets. 8. What is SQS? Simple Queue Service is also known as SQS. It is distributed queuing service which acts as a mediator for two controllers. 9. What is AWS Lambda? Lambda is an Amazon compute service which allows you to run code in the AWS Cloud without managing servers. 10. What is geo-targeting in CloudFront? Geo-Targeting is a concept where businesses can show personalized content to their audience based on their geographic location without changing the URL. This helps you create customized content for the audience of a specific geographical area, keeping their needs in the forefront.","title":"AWS"},{"location":"amazon_web_services/#aws-interview-questions","text":"","title":"AWS Interview Questions"},{"location":"amazon_web_services/#1-what-is-region-availability-zones","text":"AWS has the concept of a Region, which is a physical location around the world where they cluster data centers. They call each group of logical data centers an Availability Zone Each AWS region consists of multiple, isolated, and physically seperate AZs within a geographic area. TIP: Edge location > Availability Zones > Regions","title":"1. What is Region &amp; Availability Zones ?"},{"location":"amazon_web_services/#2-what-is-edge-locations","text":"An Edge Location is where end-users access services located at AWS, the cloud computing division of US-Headquartered Amazon. They are located in most of the major cities around the world and are specifically used by CloudFront(CDN) to distribute content to end-users to reduce latency.","title":"2. What is Edge Locations"},{"location":"amazon_web_services/#3-what-are-the-aws-core-services","text":"IAM EC2 EBS VPC RDS S3 ECS Lambda CloudFront CloudWatch SES SNS SQS DevOps tools (CodePipeline + CodeCommit + CodeBuild + CodeDeploy)","title":"3. What are the AWS Core Services ?"},{"location":"amazon_web_services/#4-what-is-ec2elastic-cloud-storage","text":"EC2, a Virtual Machine in the cloud on which you have OS-level control. You can run this cloud server whenever you want and can be used when you need to deploy your own servers in the cloud, similar to your on-premises servers, and when you want to have full control over the choice of hardware and the updates on the machine.","title":"4. What is EC2(Elastic Cloud Storage) ?"},{"location":"amazon_web_services/#5-what-are-key-pairs-in-aws","text":"Key-pairs are secure login information for your virtual machines. To connect to the instances, you can use key-pairs which contain a public-key and private-key.","title":"5. What are key-pairs in AWS?"},{"location":"amazon_web_services/#6-what-is-vpc","text":"VPC stands for Virtual Private Cloud. It allows you to customize your networking configuration. It is a network which is logically isolated from another network in the cloud. It allows you to have your IP address range, internet gateways, subnet, and security groups.","title":"6. What is VPC?"},{"location":"amazon_web_services/#7-what-is-meant-by-subnet","text":"A large section of IP Addresses divided into chunks is known as subnets.","title":"7. What is meant by subnet?"},{"location":"amazon_web_services/#8-what-is-sqs","text":"Simple Queue Service is also known as SQS. It is distributed queuing service which acts as a mediator for two controllers.","title":"8. What is SQS?"},{"location":"amazon_web_services/#9-what-is-aws-lambda","text":"Lambda is an Amazon compute service which allows you to run code in the AWS Cloud without managing servers.","title":"9. What is AWS Lambda?"},{"location":"amazon_web_services/#10-what-is-geo-targeting-in-cloudfront","text":"Geo-Targeting is a concept where businesses can show personalized content to their audience based on their geographic location without changing the URL. This helps you create customized content for the audience of a specific geographical area, keeping their needs in the forefront.","title":"10. What is geo-targeting in CloudFront?"},{"location":"devops/","text":"DevOps Interview Questions 1. What is DevOps DevOps is a set of practices that aim to enhance collaboration and communication between development and operations teams to improve the speed and quality of software delivery. It emphasizes automation, continuous integration, continuous delivery/deployment (CI/CD), and infrastructure as code (IaC) to ensure software is delivered rapidly and reliably. DevOps also involves monitoring and measuring software performance to detect and resolve issues quickly. 2. How is DevOps different from agile methodology? Agile methodology is a project management approach that emphasizes flexibility and collaboration among cross-functional teams to deliver software in small increments. DevOps is a cultural shift that emphasizes collaboration between development and operations teams to automate and streamline software delivery, with a focus on continuous integration, testing, delivery, and deployment. 3. Which are some of the most popular DevOps tools? There are many tools available for implementing DevOps practices, and the choice of tooling will depend on the specific needs and preferences of the organization. Here are some of the most popular DevOps tools: Git - A distributed version control system that enables developers to collaborate on code changes and track changes over time. Jenkins - An open-source automation server that supports continuous integration and continuous delivery. Docker - A containerization platform that enables developers to package applications and dependencies into portable containers that can be deployed anywhere. Kubernetes - An open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. Ansible - An open-source automation tool that allows system administrators to automate the deployment and configuration of software applications. Terraform - An open-source infrastructure as code tool that allows developers to provision and manage infrastructure resources on cloud platforms. Prometheus - An open-source monitoring system that collects metrics from applications and infrastructure and provides insights into system performance. ELK Stack - A set of open-source tools that includes Elasticsearch, Logstash, and Kibana, used for log management and analysis. Nagios - An open-source monitoring tool that helps to detect and resolve issues with infrastructure and applications. These are just a few examples of the many tools available in the DevOps ecosystem, and there are many more depending on specific needs and use cases. 4. What are the different phases in DevOps? DevOps involves the integration of development and operations processes across the software development lifecycle. Here are the different phases in DevOps: Plan: This phase involves the planning and coordination of activities across teams, defining goals, and prioritizing tasks. Develop: In this phase, the development team writes, tests, and reviews code changes using tools like version control, continuous integration, and automated testing. Build: This phase involves packaging and building the application code into a deployable artifact, such as a Docker image or an executable file. Test: In this phase, automated tests are run to ensure the code changes meet quality standards, and manual testing is done to validate the software's functionality. Deploy: In this phase, the application code is deployed to the production environment, either manually or using automated deployment tools. Operate: In this phase, the operations team monitors the application's performance and availability, troubleshoots issues, and maintains the infrastructure. Monitor: In this phase, the performance of the application and infrastructure is continuously monitored to detect and resolve issues quickly and to provide insights into system performance. These phases are not necessarily sequential, and many of them may occur simultaneously or iteratively depending on the organization's needs and practices. DevOps practices aim to automate and streamline each phase of the software development lifecycle to achieve faster and more reliable software delivery. 5. What is the difference between continuous delivery and continuous deployment? Continuous Delivery Continuous Deployment Ensures code can be safely deployed on to production Every change that passes the automated tests is deployed to production automatically Ensures business applications and services function as expected Makes software development and the release process faster and more robust Delivers every change to a production-like environment through rigorous automated testing There is no explicit approval from a developer and requires a developed culture of monitoring 6. What is the use of SSH ? SSH (Secure Shell) is a cryptographic network protocol that provides a secure and encrypted way to access and manage remote machines over an insecure network. The main use of SSH is to establish a secure connection between two networked devices, such as a client and a server, and to provide secure access to the shell of the remote machine. This allows system administrators to remotely manage servers and other networked devices, such as routers and switches, securely. In addition to providing secure shell access, SSH can also be used for secure file transfer (SFTP) and remote command execution. SSH can also be used for tunneling other network protocols, such as HTTP, FTP, and SMTP, over an encrypted connection. 7. What is configuration management ? Configuration management (CM) is a crucial practice in software development and IT operations, which involves the systematic handling of changes to maintain the integrity of systems over time. CM encompasses a range of policies, techniques, procedures, and tools that are used to evaluate change proposals, manage changes, and track their progress while maintaining proper documentation. By implementing CM, organizations can ensure that changes are made in a controlled and standardized manner, reducing the risk of errors and system failures. It also facilitates collaboration between team members and enables faster, more efficient delivery of software and services. CM practices include version control, testing, deployment automation, monitoring, and documentation. These practices help organizations maintain a comprehensive view of their IT infrastructure and make informed decisions about changes that will impact the system.","title":"DEVOPS"},{"location":"devops/#devops-interview-questions","text":"","title":"DevOps Interview Questions"},{"location":"devops/#1-what-is-devops","text":"DevOps is a set of practices that aim to enhance collaboration and communication between development and operations teams to improve the speed and quality of software delivery. It emphasizes automation, continuous integration, continuous delivery/deployment (CI/CD), and infrastructure as code (IaC) to ensure software is delivered rapidly and reliably. DevOps also involves monitoring and measuring software performance to detect and resolve issues quickly.","title":"1. What is DevOps"},{"location":"devops/#2-how-is-devops-different-from-agile-methodology","text":"Agile methodology is a project management approach that emphasizes flexibility and collaboration among cross-functional teams to deliver software in small increments. DevOps is a cultural shift that emphasizes collaboration between development and operations teams to automate and streamline software delivery, with a focus on continuous integration, testing, delivery, and deployment.","title":"2. How is DevOps different from agile methodology?"},{"location":"devops/#3-which-are-some-of-the-most-popular-devops-tools","text":"There are many tools available for implementing DevOps practices, and the choice of tooling will depend on the specific needs and preferences of the organization. Here are some of the most popular DevOps tools: Git - A distributed version control system that enables developers to collaborate on code changes and track changes over time. Jenkins - An open-source automation server that supports continuous integration and continuous delivery. Docker - A containerization platform that enables developers to package applications and dependencies into portable containers that can be deployed anywhere. Kubernetes - An open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. Ansible - An open-source automation tool that allows system administrators to automate the deployment and configuration of software applications. Terraform - An open-source infrastructure as code tool that allows developers to provision and manage infrastructure resources on cloud platforms. Prometheus - An open-source monitoring system that collects metrics from applications and infrastructure and provides insights into system performance. ELK Stack - A set of open-source tools that includes Elasticsearch, Logstash, and Kibana, used for log management and analysis. Nagios - An open-source monitoring tool that helps to detect and resolve issues with infrastructure and applications. These are just a few examples of the many tools available in the DevOps ecosystem, and there are many more depending on specific needs and use cases.","title":"3. Which are some of the most popular DevOps tools?"},{"location":"devops/#4-what-are-the-different-phases-in-devops","text":"DevOps involves the integration of development and operations processes across the software development lifecycle. Here are the different phases in DevOps: Plan: This phase involves the planning and coordination of activities across teams, defining goals, and prioritizing tasks. Develop: In this phase, the development team writes, tests, and reviews code changes using tools like version control, continuous integration, and automated testing. Build: This phase involves packaging and building the application code into a deployable artifact, such as a Docker image or an executable file. Test: In this phase, automated tests are run to ensure the code changes meet quality standards, and manual testing is done to validate the software's functionality. Deploy: In this phase, the application code is deployed to the production environment, either manually or using automated deployment tools. Operate: In this phase, the operations team monitors the application's performance and availability, troubleshoots issues, and maintains the infrastructure. Monitor: In this phase, the performance of the application and infrastructure is continuously monitored to detect and resolve issues quickly and to provide insights into system performance. These phases are not necessarily sequential, and many of them may occur simultaneously or iteratively depending on the organization's needs and practices. DevOps practices aim to automate and streamline each phase of the software development lifecycle to achieve faster and more reliable software delivery.","title":"4. What are the different phases in DevOps?"},{"location":"devops/#5-what-is-the-difference-between-continuous-delivery-and-continuous-deployment","text":"Continuous Delivery Continuous Deployment Ensures code can be safely deployed on to production Every change that passes the automated tests is deployed to production automatically Ensures business applications and services function as expected Makes software development and the release process faster and more robust Delivers every change to a production-like environment through rigorous automated testing There is no explicit approval from a developer and requires a developed culture of monitoring","title":"5. What is the difference between continuous delivery and continuous deployment?"},{"location":"devops/#6-what-is-the-use-of-ssh","text":"SSH (Secure Shell) is a cryptographic network protocol that provides a secure and encrypted way to access and manage remote machines over an insecure network. The main use of SSH is to establish a secure connection between two networked devices, such as a client and a server, and to provide secure access to the shell of the remote machine. This allows system administrators to remotely manage servers and other networked devices, such as routers and switches, securely. In addition to providing secure shell access, SSH can also be used for secure file transfer (SFTP) and remote command execution. SSH can also be used for tunneling other network protocols, such as HTTP, FTP, and SMTP, over an encrypted connection.","title":"6. What is the use of SSH ?"},{"location":"devops/#7-what-is-configuration-management","text":"Configuration management (CM) is a crucial practice in software development and IT operations, which involves the systematic handling of changes to maintain the integrity of systems over time. CM encompasses a range of policies, techniques, procedures, and tools that are used to evaluate change proposals, manage changes, and track their progress while maintaining proper documentation. By implementing CM, organizations can ensure that changes are made in a controlled and standardized manner, reducing the risk of errors and system failures. It also facilitates collaboration between team members and enables faster, more efficient delivery of software and services. CM practices include version control, testing, deployment automation, monitoring, and documentation. These practices help organizations maintain a comprehensive view of their IT infrastructure and make informed decisions about changes that will impact the system.","title":"7. What is configuration management ?"},{"location":"python/","text":"Python Theoretical Theoretical interview questions in Python are designed to assess a candidate's understanding of fundamental concepts and principles in the field of software development. 1. What are key features of Python ? Easy to learn due to clear syntax and readability Easy to interpret, making debug is easy Free and open source OOP supported, general purpose programming language Python is dynamically typed , this means that you don\u2019t need to state the types of variables when you declare them or anything like that. 2. What are keywords in Python ? Keywords are the reserved words in Python. We cannot use a keyword as a variable name, function name or any other identifier. Here's a list of all keywords in Python Programming 3. What are literals in Python ? Literals in Python refer to the data that is given in a variable or constant. String Literals Numeric Literals Boolean Literals Special Literals 4. What are functions in Python ? Functions in Python refer to blocks that have organised, and reusable codes to perform single, and related events. Functions are important to create better modularity for applications which reuse high degree of coding. Functions are executed only when a call is made to the function. 5. What is the difference between list and tuples in Python ? LIST TUPLE Mutable. Items can be changed Immutable. Items cannot be changed Slower than tuples Faster than list eg_list= [1,2,3,4,5] example=(1,2,3,4,5) 6. What are Python namespaces ? A namespace is a naming system used to make sure that names are unique to avoid naming conflicts.The objects are variables and functions. Built-in namespace\u2013 These namespaces contain all the built in objects in python and are available whenever python is running. Global namespace\u2013 These are namespaces for all the objects created at the level of the main program. Enclosing namespaces\u2013 These namespaces are at the higher level or outer function. Local namespaces\u2013 These namespaces are at the local or inner function. 7. What are decorators in Python ? Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. Decorators are used to add some design patterns to a function without changing its structure. Decorators generally are defined before the function they are enhancing. To apply a decorator we first define the decorator function. Then we write the function it is applied to and simply add the decorator function above the function it has to be applied to. For this, we use the @ symbol before the decorator. def whee_decorator(func): def wrapper(): print(\"Something is happening before the function is called.\") func() print(\"Something is happening after the function is called.\") return wrapper @whee_decorator def say_whee(): print(\"Whee!\") 8. What is slicing in Python ? Slicing is used to access parts of sequences like lists, tuples, and strings. The syntax of slicing is [start:stop:step] start : refer starting index for collection. In Python first index is 0 stop : refer last index for collection which is not included. step : refer incrementation / decrementation for each iteration. Checkout following examples to understand better example=[] example[start:stop] # items start through stop-1 example[start:] # items start through the rest of the array example[:stop] # items from the beginning through stop-1 example[:] # a copy of the whole array example[start:stop:step] # # start through not past stop, by step 9. How is memory managed in Python ? Memory is managed in Python in the following ways: Memory management in Python is managed by Python private heap space. All Python objects and data structures are located in a private heap . The programmer does not have access to this private heap. The Python interpreter takes care of this instead. The allocation of heap space for Python objects is done by Python\u2019s memory manager. The core API gives access to some tools for the programmer to code. Python also has an inbuilt garbage collector, which recycles all the unused memory and so that it can be made available to the heap space. 10. What are Python modules? Name some commonly used built-in modules in Python ? A module is a file containing Python definitions and statements. This code can either be functions classes or variables. Ex ; os, sys, math, random, json, csv 11. What are local variables and global variables in Python ? Global : Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program Local : Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space. BASE_URL is a global variable and user_domain is local variable and only can be accessed in scope of function BASE_URL=\"www.github.com\" def get_user_domain(base_url:str,username:str): user_domain:str=\"\" user_domain=f\"{base_url}/{username}\" return user_domain 12. What is type conversion in Python ? Type conversion refers to the conversion of one data type into another. Implicit type conversion, interpreter helps in automatically converting the data type into another data type without any User involvement. Explicit type conversion the data type in changed into a required type by the user. 13. What is PEP 8 and why is it important ? PEP stands for Python Enhancement Proposal. PEP 8 is especially important since it documents the style guidelines for Python Code. It is a set of rules that specify how to write and design Python code for maximum readability. 14. What is docstring in Python? Documentation string or docstring is a multiline string used to document a specific code segment. Below you can see example docstr for do_sth function def do_sth(: \"\"\" do_sth method return message (I AM DOCSTRING) \"\"\" return \"DO STH\" 15. What is PYTHONPATH in Python ? The PYTHONPATH variable has a value that is a string with a list of directories that Python should add to the sys.path directory list. If PYTHONPATH is not setted you can encounter with various problems such as xyz package is not found and etc. If you want to set PYTHONPATH please do as following echo $PYTHONPATH # if return none do the following export PYTHONPATH=\"$PWD\" # project root directory 16. What is a lambda function in Python ? A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but, unlike normal functions, evaluates and returns only one expression # lambda function lambda x: x - 1 # normal function def decrease(x): return x - 1 17. How Python is interpreted ? Python as a language is not interpreted or compiled. Interpreted or compiled is the property of the implementation. Python is a bytecode(set of interpreter readable instructions) interpreted generally. 18. What does args and *kwargs mean ? args stands for arguments, and kwargs stands for is keyword arguments. * args allows you to pass the desired number of arguments to the function * kwargs represent same idea, but only that this format uses keyword-based Python dictionaries Let's look at following example to understand better args and *kwargs def example(x,y,*args,**kwargs): # access args, it's a tuple arguments=[arg for arg in args] # access kwargs, it's a dictionary keyword_arguments={key:value for (key,value) in kwargs.items()} print(f\"x:{x}, y:{y}\") print(f\"arguments:{arguments}\") print(f\"keyword_arguments:{keyword_arguments}\") example(-3,-2,-1,0,a= 1, b= 2, c= 3, d= 4, e= 5) The code provided above outputs the following: x:-3, y:-2 arguments:[-1, 0] keyword_arguments:{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} 19. What is context manager in Python ? A context manager is a Python construct that is used to manage resources, such as files or network connections, that need to be properly initialized and cleaned up after use. The context manager provides a convenient way to allocate and release resources automatically, ensuring that resources are properly managed even if an error occurs or an exception is raised. The context manager is implemented as an object that defines two methods: __enter__ and __exit__. The __enter__ method is called when the context is entered, and it returns the resource object that will be used in the block of code that follows. The context manager can be used with the with statement, which provides a convenient way to manage resources in a safe and reliable manner. When the with statement is used, the context manager is automatically called when the block of code is entered, and it is automatically cleaned up when the block of code is exited, even if an error occurs. class prep_interview: def __enter__(self): print(\"Entering the context...\") # Code to initialize the resource goes here return self def __exit__(self, exc_type, exc_val, exc_tb): # Code to clean up the resource goes here print(\"Exiting the context...\") # usage of the context manager with prep_interview() as cm: print(\"Inside the context.\") # built-in context manager with open('file.txt', 'w') as f: f.write('Hello, World!') # python request library with requests.Session() as session: session.get('https://httpbin.org') 20 . What is __init__ in Python ? The __init__ method is the Python equivalent of the C++ constructor in an object-oriented approach. The __init__ function is called every time an object is created from a class. The __init__ method lets the class initialize the object\u2019s attributes and serves no other purpose. In constructor (__init__) you can return nothing. It required to return None 21. What does break, continue and pass meaning in Python ? break : Allows loop termination when some condition is met and the control is transferred to the next statement continue: Allows skipping some part of a loop when some specific condition is met and the control is transferred to the beginning of the loop Used when you need some block of code syntactically, but you want to skip its execution. This is basically null opearion. Nothing happens when this is executed. index = -5 while True: if index < 0: pass if index == 0: index += 1 continue if index > 0: print(1 / index) if index > 5: break index += 1 22. What is Scope Resolution in Python ? A scope is a block of code where an object in Python remains relevant.Each and every object of python functions within its respective scope 23. What is the Python Global Interpreter Lock (GIL) ? The Python Global Interpreter Lock (GIL) is a mechanism used in the CPython implementation of the Python programming language to ensure that only one thread executes Python bytecode at a time . The GIL is a mutex that protects access to Python objects, preventing multiple threads from modifying them at the same time. The GIL has both benefits and drawbacks. On the one hand, it simplifies the implementation of the Python interpreter and makes it easier to write thread-safe Python code . On the other hand, it can limit the performance of multi-threaded Python programs , because only one thread can execute Python code at a time. This means that CPU-bound tasks, which require a lot of computation, may not be able to take full advantage of multi-core CPUs. However, it's important to note that the GIL only affects multi-threaded Python programs, not multi-process Python programs . Python's multiprocessing module can be used to take advantage of multiple CPUs without being limited by the GIL. Additionally, the GIL is specific to the CPython implementation of Python, and other implementations such as Jython and IronPython do not have a GIL. NOTE :The GIL can have a significant impact on the performance of multi-threaded Python programs that perform CPU-bound tasks, but it may have less of an impact on programs that spend most of their time waiting for I/O or calling into C extensions that release the GIL. 24. What are generators in Python ? Generators are functions that return an iterable collection of items, one at a time, in a set manner. Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object. Here's an example of a simple generator that generates the first n Fibonacci numbers: # creating generator def fibonacci(n): a, b = 0, 1 for i in range(n): yield a a, b = b, a + b # accessing generator for number in fibonacci(10): print(number) # Code output: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 25. How are arguments passed by value or by reference in Python ? Pass by value: Copy of the actual object is passed. Changing the value of the copy of the object will not change the value of the original object. Pass by reference: Reference to the actual object is passed. Changing the value of the new object will change the value of the original object. Arguments are passed by reference in Python, but the behavior can depend on whether the objects are mutable or immutable. Mutable objects can be modified in place inside a function, and the modifications will be visible outside the function. Immutable objects cannot be modified in place, so modifications inside a function will create new objects and not affect the original objects outside the function. 26. What are iterators in Python ? An iterator is an object. It remembers its state i.e., where it is during iteration __iter__() method initializes an iterator. __next__() method which returns the next item in iteration and points to the next element. Upon reaching the end of iterable object __next__() must return StopIteration exception. It is also self-iterable. # example iterator class EvenNumbers: # constructor def __init__(self, n): self.n = n self.current = 0 # returns the iterator object itself def __iter__(self): return self # computes the next even number in the sequence and updates the current value def __next__(self): if self.current >= self.n: raise StopIteration result = 2 * self.current self.current += 1 return result # calling iterator for number in EvenNumbers(5): print(number) # output -> 0, 2, 4, 6, 8 27. What are the negative indexes and why are they used ? In Python, negative indexes are used to access elements from the end of a sequence, such as a string, list, or tuple. The last element in the sequence can be accessed using an index of -1, the second-to-last element can be accessed using an index of -2, and so on. example_list = [1, 2, 3, 4, 5] last_element = example_list[-1] # returns 5 last_two_elements = example_list[-2:] # returns [4, 5] Negative indexes can be particularly useful when working with sequences of unknown length or when you need to access elements relative to the end of the sequence, such as when processing log files or other types of time-series data 28. Why is finalize used ? In Python, finalize is a method that is used to release resources associated with an object when it is no longer needed. This method is part of the Python garbage collection mechanism, which automatically manages memory allocation and deallocation for objects created in a Python program. The finalize method provides a way to automatically release these external resources when the object is garbage-collected. To use finalize, you define a callback function that will be called when the object is about to be garbage-collected. This function can then release any external resources held by the object, such as closing a file or disconnecting from a network socket. import atexit class FileWrapper: def __init__(self, filename): self.file = open(filename, 'w') self.finalizer = atexit.register(self.finalize) def write(self, data): self.file.write(data) def finalize(self): self.file.close() atexit.unregister(self.finalizer) 29. What is comprehensions in Python ? Comprehensions in Python are a concise way to create sequences (such as lists, sets, and dictionaries) based on existing sequences. They are a shorthand notation for loops that reduce the amount of code you need to write and make it easier to express complex operations on sequences. Following comprehension creates a list of squares of even numbers between 0 and 9. squares = [x**2 for x in range(10) if x % 2 == 0] Following comprehension creates a set of squares of even numbers between 0 and 9. squares_set = {x**2 for x in range(10) if x % 2 == 0} Following comprehension creates a dictionary of even numbers between 0 and 9 and their squares. squares_dict = {x: x**2 for x in range(10) if x % 2 == 0} 30. What is difference between append() and extend() in Python ? In Python, both the append and extend methods are used to add new elements to a list. append method adds a single element to the end of the list: my_list = [1, 2, 3] my_list.append(4) print(my_list) # Output: [1, 2, 3, 4] extend method, on the other hand, adds multiple elements to the end of the list. It takes an iterable (e.g. a list, tuple, set, etc.) and adds all of its elements to the list: my_list = [1, 2, 3] my_list.extend([4, 5, 6]) print(my_list) # Output: [1, 2, 3, 4, 5, 6] 31. What is monkey patching in Python ? Monkey patching in Python is the practice of changing or adding functionality to a module, class, or object at runtime, without actually modifying the original source code. Let's say you're working with a third-party library that has a function called calculate() which takes two arguments and returns their sum. However, for some reason, you want this function to also return the difference between the two arguments. Instead of modifying the original code of the library, you can use monkey patching to add this additional functionality. import some_library # define a new function that we want to add to the library def calculate_with_difference(a, b): sum = some_library.calculate(a, b) difference = a - b return (sum, difference) # monkey patch the library with our new function some_library.calculate = calculate_with_difference If you call some_library.calculate(10, 5), it will return (15, 5) instead of just 15. This is because we used monkey patching to add the difference value to the return value of the calculate() function. 32. What is mocking in Python ? Mocking is a technique used in unit testing to replace a real object or function with a fake one that simulates its behavior. The purpose of mocking is to isolate the code being tested from its dependencies, so that the test can focus on the behavior of the code under test without being affected by the behavior of external dependencies. Mocking is often used to simulate the behavior of complex or external dependencies that are difficult to test directly, such as web services or databases. By mocking these dependencies, a test can be designed to verify that the code under test interacts with the dependency correctly, without actually making any real calls to the external service. Mocking can be a powerful technique for writing effective unit tests in Python, but it should be used judiciously. Overuse of mocking can lead to brittle and hard-to-maintain tests, as well as a false sense of security that the code is working correctly when in fact it may not be. from unittest.mock import MagicMock import requests def get_data_from_api(api_url): response = requests.get(api_url) if response.status_code == 200: return response.json() else: return None def test_get_data_from_api(): # create a mock response object mock_response = MagicMock() mock_response.status_code = 200 mock_response.json.return_value = {'foo': 'bar'} # create a mock requests.get function that returns the mock response requests.get = MagicMock(return_value=mock_response) # call the function under test data = get_data_from_api('https://example.com/api') # assert that the function returned the expected data assert data == {'foo': 'bar'} # assert that requests.get was called with the correct URL requests.get.assert_called_with('https://example.com/api') 33. What is the difference between .py and .pyc files ? Python source code files have a \".py\" extension and are human-readable text files that contain Python code. When you run a Python program, the interpreter reads the \".py\" file and executes the code it contains. Python compiled bytecode files have a \".pyc\" extension and are created by the Python interpreter when a \".py\" file is imported or run. The \".pyc\" file is a binary file containing the compiled bytecode version of the \".py\" file. The Python interpreter can execute \".pyc\" files faster than \".py\" files because it doesn't need to compile the source code again. Instead, it loads the pre-compiled bytecode directly into memory. 34. What does split() and join() functions do in Python ? The split() and join() functions in Python are used to manipulate strings. The split() function is used to split a string into a list of substrings based on a delimiter character. By default, the delimiter is a space character, but you can specify a different delimiter as an argument to the function. Here is an example: my_string = \"Hello World\" split_string = my_string.split() # Returns ['Hello', 'World'] The join() function, on the other hand, is used to join a list of strings into a single string using a specified delimiter. Here is an example: my_list = ['Hello', 'World'] joined_string = ' '.join(my_list) # Returns \"Hello World\" 35. What is multiprocessing ? Multiprocessing refers to a system that has more than two central processing units (CPUs). Every additional CPU added to a system increases its speed, power and memory. This allows users to run multiple processes simultaneously There are two primary categories of multiprocessing systems: * Symmetric multiprocessing: This multiprocessing system uses computer hardware and software that incorporates two or more identical processors connected by one memory space. These processors have complete access to all input and output devices and receive equal treatment. * Asymmetric multiprocessing: In this multiprocessing system, different CPUs have access to separate input and output (I/O) devices. For example, one CPU might perform I/O operations, while another CPU might focus on maintaining the operating system. 36. What is multithreading ? Multithreading is a programming technique that assigns multiple code segments to a single process. These code segments, also referred to as threads, run concurrently and parallel to each other. These threads share the same memory space within a parent process 37. What is Mutex(Mutual Exclusion)? The point of a mutex is to synchronize two threads. When you have two threads attempting to access a single resource, the general pattern is to have the first block of code attempting access to set the mutex before entering the code. When the second code block attempts access, it sees that the mutex is set and waits until the first block of code is complete (and unsets the mutex), then continues. 38. Multithreading vs. Multiprocessing Aspect Multithreading Multiprocessing Unit of Execution Threads (within a single process) Processes (separate instances of the program) Communication Shared memory, easy communication Inter-process communication mechanisms Resource Efficiency More resource-efficient due to shared resources Less resource-efficient due to separate resources Data Sharing Easier but prone to synchronization issues Structured through communication mechanisms Use Cases I/O-bound tasks, concurrent within a process CPU-bound tasks, true parallelism required 39. What is CPython ? Firsty need to distinguish between a language and an implementation. Python is a language, According to Wikipedia, \"A programming language is a notation for writing programs, which are specifications of a computation or algorithm\". This means that it's simply the rules and syntax for writing code. Python is a language. CPython is the implementation of Python in C. Jython is the implementation in Java, and so on. Please go for detailed discussion to link 40. What are the common built-in data types in Python? Class Name Description NoneType Represents the NULL values in Python. int Stores integer literals including hex, octal and binary numbers as integers float Stores literals containing decimal values and/or exponent signs as floating-point numbers complex Stores complex numbers in the form (A + Bj) and has attributes: real and imag bool Stores boolean value (True or False). list Mutable sequence used to store collection of items. tuple Immutable sequence used to store collection of items. range Represents an immutable sequence of numbers generated during execution. str Immutable sequence of Unicode code points to store textual data. dict Stores comma-separated list of key: value pairs set Mutable unordered collection of distinct hashable objects. frozenset Immutable collection of distinct hashable objects. 41. What is IO-Bound Tasks ? Tasks that spend a significant amount of time waiting for input/output operations to complete, such as reading or writing to files, network communication, or database queries. Reading/writing files, making API requests, fetching data from a database, downloading data from the internet. Asynchronous programming: Utilizing asynchronous I/O operations with features like asyncio or using libraries like aiohttp for asynchronous HTTP requests. Multiprocessing: Running IO-bound tasks concurrently using multiple processes. Threading: For certain IO-bound tasks, threading can be beneficial, especially when the Global Interpreter Lock (GIL) is not a significant bottleneck. 42. What is CPU-Bound Tasks ? Tasks that spend the majority of their time performing CPU computations and have limited interaction with input/output operations. Mathematical calculations, image processing, data manipulation, and other CPU-intensive operations. Multi-threading may not provide significant performance benefits due to the Global Interpreter Lock (GIL), which allows only one thread to execute Python bytecode at a time. Multiprocessing: Running CPU-bound tasks concurrently using multiple processes, which can take advantage of multiple CPU cores. Parallel computing: Using frameworks like concurrent.futures or joblib to parallelize computations across multiple cores. Python Coding A coding interview is intended to seek out creative thinkers and those who can adapt their solutions to rapidly changing and dynamic scenarios. 1. Implement a Linked List in Python from typing import Any class Node: def __init__(self,data:Any=None): self.data=data self.next=None def __repr__(self): return self.data class LinkedList: def __init__(self): self.head=None def __repr__(self) -> str: node=self.head nodes=[] while node is not None: nodes.append(node.data) node=node.next nodes.append(\"None\") return \" --> \".join(nodes) linked_list=LinkedList() node_a=Node(\"a\") linked_list.head=node_a node_b=Node(\"b\") node_a.next = node_b node_c=Node(\"c\") node_b.next=node_c print(linked_list)","title":"PYTHON"},{"location":"python/#python-theoretical","text":"Theoretical interview questions in Python are designed to assess a candidate's understanding of fundamental concepts and principles in the field of software development.","title":"Python Theoretical"},{"location":"python/#1-what-are-key-features-of-python","text":"Easy to learn due to clear syntax and readability Easy to interpret, making debug is easy Free and open source OOP supported, general purpose programming language Python is dynamically typed , this means that you don\u2019t need to state the types of variables when you declare them or anything like that.","title":"1. What are key features of Python ?"},{"location":"python/#2-what-are-keywords-in-python","text":"Keywords are the reserved words in Python. We cannot use a keyword as a variable name, function name or any other identifier. Here's a list of all keywords in Python Programming","title":"2. What are keywords in Python ?"},{"location":"python/#3-what-are-literals-in-python","text":"Literals in Python refer to the data that is given in a variable or constant. String Literals Numeric Literals Boolean Literals Special Literals","title":"3. What are literals in Python ?"},{"location":"python/#4-what-are-functions-in-python","text":"Functions in Python refer to blocks that have organised, and reusable codes to perform single, and related events. Functions are important to create better modularity for applications which reuse high degree of coding. Functions are executed only when a call is made to the function.","title":"4. What are functions in Python ?"},{"location":"python/#5-what-is-the-difference-between-list-and-tuples-in-python","text":"LIST TUPLE Mutable. Items can be changed Immutable. Items cannot be changed Slower than tuples Faster than list eg_list= [1,2,3,4,5] example=(1,2,3,4,5)","title":"5. What is the difference between list and tuples in Python ?"},{"location":"python/#6-what-are-python-namespaces","text":"A namespace is a naming system used to make sure that names are unique to avoid naming conflicts.The objects are variables and functions. Built-in namespace\u2013 These namespaces contain all the built in objects in python and are available whenever python is running. Global namespace\u2013 These are namespaces for all the objects created at the level of the main program. Enclosing namespaces\u2013 These namespaces are at the higher level or outer function. Local namespaces\u2013 These namespaces are at the local or inner function.","title":"6. What are Python namespaces ?"},{"location":"python/#7-what-are-decorators-in-python","text":"Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. Decorators are used to add some design patterns to a function without changing its structure. Decorators generally are defined before the function they are enhancing. To apply a decorator we first define the decorator function. Then we write the function it is applied to and simply add the decorator function above the function it has to be applied to. For this, we use the @ symbol before the decorator. def whee_decorator(func): def wrapper(): print(\"Something is happening before the function is called.\") func() print(\"Something is happening after the function is called.\") return wrapper @whee_decorator def say_whee(): print(\"Whee!\")","title":"7. What are decorators in Python ?"},{"location":"python/#8-what-is-slicing-in-python","text":"Slicing is used to access parts of sequences like lists, tuples, and strings. The syntax of slicing is [start:stop:step] start : refer starting index for collection. In Python first index is 0 stop : refer last index for collection which is not included. step : refer incrementation / decrementation for each iteration. Checkout following examples to understand better example=[] example[start:stop] # items start through stop-1 example[start:] # items start through the rest of the array example[:stop] # items from the beginning through stop-1 example[:] # a copy of the whole array example[start:stop:step] # # start through not past stop, by step","title":"8. What is slicing in Python ?"},{"location":"python/#9-how-is-memory-managed-in-python","text":"Memory is managed in Python in the following ways: Memory management in Python is managed by Python private heap space. All Python objects and data structures are located in a private heap . The programmer does not have access to this private heap. The Python interpreter takes care of this instead. The allocation of heap space for Python objects is done by Python\u2019s memory manager. The core API gives access to some tools for the programmer to code. Python also has an inbuilt garbage collector, which recycles all the unused memory and so that it can be made available to the heap space.","title":"9. How is memory managed in Python ?"},{"location":"python/#10-what-are-python-modules-name-some-commonly-used-built-in-modules-in-python","text":"A module is a file containing Python definitions and statements. This code can either be functions classes or variables. Ex ; os, sys, math, random, json, csv","title":"10. What are Python modules? Name some commonly used built-in modules in Python ?"},{"location":"python/#11-what-are-local-variables-and-global-variables-in-python","text":"Global : Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program Local : Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space. BASE_URL is a global variable and user_domain is local variable and only can be accessed in scope of function BASE_URL=\"www.github.com\" def get_user_domain(base_url:str,username:str): user_domain:str=\"\" user_domain=f\"{base_url}/{username}\" return user_domain","title":"11. What are local variables and global variables in Python ?"},{"location":"python/#12-what-is-type-conversion-in-python","text":"Type conversion refers to the conversion of one data type into another. Implicit type conversion, interpreter helps in automatically converting the data type into another data type without any User involvement. Explicit type conversion the data type in changed into a required type by the user.","title":"12. What is type conversion in Python ?"},{"location":"python/#13-what-is-pep-8-and-why-is-it-important","text":"PEP stands for Python Enhancement Proposal. PEP 8 is especially important since it documents the style guidelines for Python Code. It is a set of rules that specify how to write and design Python code for maximum readability.","title":"13. What is PEP 8 and why is it important ?"},{"location":"python/#14-what-is-docstring-in-python","text":"Documentation string or docstring is a multiline string used to document a specific code segment. Below you can see example docstr for do_sth function def do_sth(: \"\"\" do_sth method return message (I AM DOCSTRING) \"\"\" return \"DO STH\"","title":"14. What is docstring in Python?"},{"location":"python/#15-what-is-pythonpath-in-python","text":"The PYTHONPATH variable has a value that is a string with a list of directories that Python should add to the sys.path directory list. If PYTHONPATH is not setted you can encounter with various problems such as xyz package is not found and etc. If you want to set PYTHONPATH please do as following echo $PYTHONPATH # if return none do the following export PYTHONPATH=\"$PWD\" # project root directory","title":"15. What is PYTHONPATH in Python ?"},{"location":"python/#16-what-is-a-lambda-function-in-python","text":"A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but, unlike normal functions, evaluates and returns only one expression # lambda function lambda x: x - 1 # normal function def decrease(x): return x - 1","title":"16. What is a lambda function in Python ?"},{"location":"python/#17-how-python-is-interpreted","text":"Python as a language is not interpreted or compiled. Interpreted or compiled is the property of the implementation. Python is a bytecode(set of interpreter readable instructions) interpreted generally.","title":"17. How Python is interpreted ?"},{"location":"python/#18-what-does-args-and-kwargs-mean","text":"args stands for arguments, and kwargs stands for is keyword arguments. * args allows you to pass the desired number of arguments to the function * kwargs represent same idea, but only that this format uses keyword-based Python dictionaries Let's look at following example to understand better args and *kwargs def example(x,y,*args,**kwargs): # access args, it's a tuple arguments=[arg for arg in args] # access kwargs, it's a dictionary keyword_arguments={key:value for (key,value) in kwargs.items()} print(f\"x:{x}, y:{y}\") print(f\"arguments:{arguments}\") print(f\"keyword_arguments:{keyword_arguments}\") example(-3,-2,-1,0,a= 1, b= 2, c= 3, d= 4, e= 5) The code provided above outputs the following: x:-3, y:-2 arguments:[-1, 0] keyword_arguments:{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}","title":"18. What does args and *kwargs mean ?"},{"location":"python/#19-what-is-context-manager-in-python","text":"A context manager is a Python construct that is used to manage resources, such as files or network connections, that need to be properly initialized and cleaned up after use. The context manager provides a convenient way to allocate and release resources automatically, ensuring that resources are properly managed even if an error occurs or an exception is raised. The context manager is implemented as an object that defines two methods: __enter__ and __exit__. The __enter__ method is called when the context is entered, and it returns the resource object that will be used in the block of code that follows. The context manager can be used with the with statement, which provides a convenient way to manage resources in a safe and reliable manner. When the with statement is used, the context manager is automatically called when the block of code is entered, and it is automatically cleaned up when the block of code is exited, even if an error occurs. class prep_interview: def __enter__(self): print(\"Entering the context...\") # Code to initialize the resource goes here return self def __exit__(self, exc_type, exc_val, exc_tb): # Code to clean up the resource goes here print(\"Exiting the context...\") # usage of the context manager with prep_interview() as cm: print(\"Inside the context.\") # built-in context manager with open('file.txt', 'w') as f: f.write('Hello, World!') # python request library with requests.Session() as session: session.get('https://httpbin.org')","title":"19. What is context manager in Python ?"},{"location":"python/#20-what-is-__init__-in-python","text":"The __init__ method is the Python equivalent of the C++ constructor in an object-oriented approach. The __init__ function is called every time an object is created from a class. The __init__ method lets the class initialize the object\u2019s attributes and serves no other purpose. In constructor (__init__) you can return nothing. It required to return None","title":"20 . What is __init__ in Python ?"},{"location":"python/#21-what-does-break-continue-and-pass-meaning-in-python","text":"break : Allows loop termination when some condition is met and the control is transferred to the next statement continue: Allows skipping some part of a loop when some specific condition is met and the control is transferred to the beginning of the loop Used when you need some block of code syntactically, but you want to skip its execution. This is basically null opearion. Nothing happens when this is executed. index = -5 while True: if index < 0: pass if index == 0: index += 1 continue if index > 0: print(1 / index) if index > 5: break index += 1","title":"21. What does  break, continue and pass meaning in Python ?"},{"location":"python/#22-what-is-scope-resolution-in-python","text":"A scope is a block of code where an object in Python remains relevant.Each and every object of python functions within its respective scope","title":"22. What is Scope Resolution in Python ?"},{"location":"python/#23-what-is-the-python-global-interpreter-lock-gil","text":"The Python Global Interpreter Lock (GIL) is a mechanism used in the CPython implementation of the Python programming language to ensure that only one thread executes Python bytecode at a time . The GIL is a mutex that protects access to Python objects, preventing multiple threads from modifying them at the same time. The GIL has both benefits and drawbacks. On the one hand, it simplifies the implementation of the Python interpreter and makes it easier to write thread-safe Python code . On the other hand, it can limit the performance of multi-threaded Python programs , because only one thread can execute Python code at a time. This means that CPU-bound tasks, which require a lot of computation, may not be able to take full advantage of multi-core CPUs. However, it's important to note that the GIL only affects multi-threaded Python programs, not multi-process Python programs . Python's multiprocessing module can be used to take advantage of multiple CPUs without being limited by the GIL. Additionally, the GIL is specific to the CPython implementation of Python, and other implementations such as Jython and IronPython do not have a GIL. NOTE :The GIL can have a significant impact on the performance of multi-threaded Python programs that perform CPU-bound tasks, but it may have less of an impact on programs that spend most of their time waiting for I/O or calling into C extensions that release the GIL.","title":"23. What is the Python Global Interpreter Lock (GIL) ?"},{"location":"python/#24-what-are-generators-in-python","text":"Generators are functions that return an iterable collection of items, one at a time, in a set manner. Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object. Here's an example of a simple generator that generates the first n Fibonacci numbers: # creating generator def fibonacci(n): a, b = 0, 1 for i in range(n): yield a a, b = b, a + b # accessing generator for number in fibonacci(10): print(number) # Code output: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34","title":"24. What are generators in Python ?"},{"location":"python/#25-how-are-arguments-passed-by-value-or-by-reference-in-python","text":"Pass by value: Copy of the actual object is passed. Changing the value of the copy of the object will not change the value of the original object. Pass by reference: Reference to the actual object is passed. Changing the value of the new object will change the value of the original object. Arguments are passed by reference in Python, but the behavior can depend on whether the objects are mutable or immutable. Mutable objects can be modified in place inside a function, and the modifications will be visible outside the function. Immutable objects cannot be modified in place, so modifications inside a function will create new objects and not affect the original objects outside the function.","title":"25. How are arguments passed by value or by reference in Python ?"},{"location":"python/#26-what-are-iterators-in-python","text":"An iterator is an object. It remembers its state i.e., where it is during iteration __iter__() method initializes an iterator. __next__() method which returns the next item in iteration and points to the next element. Upon reaching the end of iterable object __next__() must return StopIteration exception. It is also self-iterable. # example iterator class EvenNumbers: # constructor def __init__(self, n): self.n = n self.current = 0 # returns the iterator object itself def __iter__(self): return self # computes the next even number in the sequence and updates the current value def __next__(self): if self.current >= self.n: raise StopIteration result = 2 * self.current self.current += 1 return result # calling iterator for number in EvenNumbers(5): print(number) # output -> 0, 2, 4, 6, 8","title":"26. What are iterators in Python ?"},{"location":"python/#27-what-are-the-negative-indexes-and-why-are-they-used","text":"In Python, negative indexes are used to access elements from the end of a sequence, such as a string, list, or tuple. The last element in the sequence can be accessed using an index of -1, the second-to-last element can be accessed using an index of -2, and so on. example_list = [1, 2, 3, 4, 5] last_element = example_list[-1] # returns 5 last_two_elements = example_list[-2:] # returns [4, 5] Negative indexes can be particularly useful when working with sequences of unknown length or when you need to access elements relative to the end of the sequence, such as when processing log files or other types of time-series data","title":"27. What are the negative indexes and why are they used ?"},{"location":"python/#28-why-is-finalize-used","text":"In Python, finalize is a method that is used to release resources associated with an object when it is no longer needed. This method is part of the Python garbage collection mechanism, which automatically manages memory allocation and deallocation for objects created in a Python program. The finalize method provides a way to automatically release these external resources when the object is garbage-collected. To use finalize, you define a callback function that will be called when the object is about to be garbage-collected. This function can then release any external resources held by the object, such as closing a file or disconnecting from a network socket. import atexit class FileWrapper: def __init__(self, filename): self.file = open(filename, 'w') self.finalizer = atexit.register(self.finalize) def write(self, data): self.file.write(data) def finalize(self): self.file.close() atexit.unregister(self.finalizer)","title":"28. Why is finalize used ?"},{"location":"python/#29-what-is-comprehensions-in-python","text":"Comprehensions in Python are a concise way to create sequences (such as lists, sets, and dictionaries) based on existing sequences. They are a shorthand notation for loops that reduce the amount of code you need to write and make it easier to express complex operations on sequences. Following comprehension creates a list of squares of even numbers between 0 and 9. squares = [x**2 for x in range(10) if x % 2 == 0] Following comprehension creates a set of squares of even numbers between 0 and 9. squares_set = {x**2 for x in range(10) if x % 2 == 0} Following comprehension creates a dictionary of even numbers between 0 and 9 and their squares. squares_dict = {x: x**2 for x in range(10) if x % 2 == 0}","title":"29. What is comprehensions in Python ?"},{"location":"python/#30-what-is-difference-between-append-and-extend-in-python","text":"In Python, both the append and extend methods are used to add new elements to a list. append method adds a single element to the end of the list: my_list = [1, 2, 3] my_list.append(4) print(my_list) # Output: [1, 2, 3, 4] extend method, on the other hand, adds multiple elements to the end of the list. It takes an iterable (e.g. a list, tuple, set, etc.) and adds all of its elements to the list: my_list = [1, 2, 3] my_list.extend([4, 5, 6]) print(my_list) # Output: [1, 2, 3, 4, 5, 6]","title":"30. What is difference between append() and extend() in Python ?"},{"location":"python/#31-what-is-monkey-patching-in-python","text":"Monkey patching in Python is the practice of changing or adding functionality to a module, class, or object at runtime, without actually modifying the original source code. Let's say you're working with a third-party library that has a function called calculate() which takes two arguments and returns their sum. However, for some reason, you want this function to also return the difference between the two arguments. Instead of modifying the original code of the library, you can use monkey patching to add this additional functionality. import some_library # define a new function that we want to add to the library def calculate_with_difference(a, b): sum = some_library.calculate(a, b) difference = a - b return (sum, difference) # monkey patch the library with our new function some_library.calculate = calculate_with_difference If you call some_library.calculate(10, 5), it will return (15, 5) instead of just 15. This is because we used monkey patching to add the difference value to the return value of the calculate() function.","title":"31. What is monkey patching in Python ?"},{"location":"python/#32-what-is-mocking-in-python","text":"Mocking is a technique used in unit testing to replace a real object or function with a fake one that simulates its behavior. The purpose of mocking is to isolate the code being tested from its dependencies, so that the test can focus on the behavior of the code under test without being affected by the behavior of external dependencies. Mocking is often used to simulate the behavior of complex or external dependencies that are difficult to test directly, such as web services or databases. By mocking these dependencies, a test can be designed to verify that the code under test interacts with the dependency correctly, without actually making any real calls to the external service. Mocking can be a powerful technique for writing effective unit tests in Python, but it should be used judiciously. Overuse of mocking can lead to brittle and hard-to-maintain tests, as well as a false sense of security that the code is working correctly when in fact it may not be. from unittest.mock import MagicMock import requests def get_data_from_api(api_url): response = requests.get(api_url) if response.status_code == 200: return response.json() else: return None def test_get_data_from_api(): # create a mock response object mock_response = MagicMock() mock_response.status_code = 200 mock_response.json.return_value = {'foo': 'bar'} # create a mock requests.get function that returns the mock response requests.get = MagicMock(return_value=mock_response) # call the function under test data = get_data_from_api('https://example.com/api') # assert that the function returned the expected data assert data == {'foo': 'bar'} # assert that requests.get was called with the correct URL requests.get.assert_called_with('https://example.com/api')","title":"32. What is mocking in Python ?"},{"location":"python/#33-what-is-the-difference-between-py-and-pyc-files","text":"Python source code files have a \".py\" extension and are human-readable text files that contain Python code. When you run a Python program, the interpreter reads the \".py\" file and executes the code it contains. Python compiled bytecode files have a \".pyc\" extension and are created by the Python interpreter when a \".py\" file is imported or run. The \".pyc\" file is a binary file containing the compiled bytecode version of the \".py\" file. The Python interpreter can execute \".pyc\" files faster than \".py\" files because it doesn't need to compile the source code again. Instead, it loads the pre-compiled bytecode directly into memory.","title":"33. What is the difference between .py and .pyc files ?"},{"location":"python/#34-what-does-split-and-join-functions-do-in-python","text":"The split() and join() functions in Python are used to manipulate strings. The split() function is used to split a string into a list of substrings based on a delimiter character. By default, the delimiter is a space character, but you can specify a different delimiter as an argument to the function. Here is an example: my_string = \"Hello World\" split_string = my_string.split() # Returns ['Hello', 'World'] The join() function, on the other hand, is used to join a list of strings into a single string using a specified delimiter. Here is an example: my_list = ['Hello', 'World'] joined_string = ' '.join(my_list) # Returns \"Hello World\"","title":"34. What does split() and join() functions do in Python ?"},{"location":"python/#35-what-is-multiprocessing","text":"Multiprocessing refers to a system that has more than two central processing units (CPUs). Every additional CPU added to a system increases its speed, power and memory. This allows users to run multiple processes simultaneously There are two primary categories of multiprocessing systems: * Symmetric multiprocessing: This multiprocessing system uses computer hardware and software that incorporates two or more identical processors connected by one memory space. These processors have complete access to all input and output devices and receive equal treatment. * Asymmetric multiprocessing: In this multiprocessing system, different CPUs have access to separate input and output (I/O) devices. For example, one CPU might perform I/O operations, while another CPU might focus on maintaining the operating system.","title":"35. What is multiprocessing ?"},{"location":"python/#36-what-is-multithreading","text":"Multithreading is a programming technique that assigns multiple code segments to a single process. These code segments, also referred to as threads, run concurrently and parallel to each other. These threads share the same memory space within a parent process","title":"36. What is multithreading ?"},{"location":"python/#37-what-is-mutexmutual-exclusion","text":"The point of a mutex is to synchronize two threads. When you have two threads attempting to access a single resource, the general pattern is to have the first block of code attempting access to set the mutex before entering the code. When the second code block attempts access, it sees that the mutex is set and waits until the first block of code is complete (and unsets the mutex), then continues.","title":"37. What is Mutex(Mutual Exclusion)?"},{"location":"python/#38-multithreading-vs-multiprocessing","text":"Aspect Multithreading Multiprocessing Unit of Execution Threads (within a single process) Processes (separate instances of the program) Communication Shared memory, easy communication Inter-process communication mechanisms Resource Efficiency More resource-efficient due to shared resources Less resource-efficient due to separate resources Data Sharing Easier but prone to synchronization issues Structured through communication mechanisms Use Cases I/O-bound tasks, concurrent within a process CPU-bound tasks, true parallelism required","title":"38. Multithreading vs. Multiprocessing"},{"location":"python/#39-what-is-cpython","text":"Firsty need to distinguish between a language and an implementation. Python is a language, According to Wikipedia, \"A programming language is a notation for writing programs, which are specifications of a computation or algorithm\". This means that it's simply the rules and syntax for writing code. Python is a language. CPython is the implementation of Python in C. Jython is the implementation in Java, and so on. Please go for detailed discussion to link","title":"39. What is CPython ?"},{"location":"python/#40-what-are-the-common-built-in-data-types-in-python","text":"Class Name Description NoneType Represents the NULL values in Python. int Stores integer literals including hex, octal and binary numbers as integers float Stores literals containing decimal values and/or exponent signs as floating-point numbers complex Stores complex numbers in the form (A + Bj) and has attributes: real and imag bool Stores boolean value (True or False). list Mutable sequence used to store collection of items. tuple Immutable sequence used to store collection of items. range Represents an immutable sequence of numbers generated during execution. str Immutable sequence of Unicode code points to store textual data. dict Stores comma-separated list of key: value pairs set Mutable unordered collection of distinct hashable objects. frozenset Immutable collection of distinct hashable objects.","title":"40. What are the common built-in data types in Python?"},{"location":"python/#41-what-is-io-bound-tasks","text":"Tasks that spend a significant amount of time waiting for input/output operations to complete, such as reading or writing to files, network communication, or database queries. Reading/writing files, making API requests, fetching data from a database, downloading data from the internet. Asynchronous programming: Utilizing asynchronous I/O operations with features like asyncio or using libraries like aiohttp for asynchronous HTTP requests. Multiprocessing: Running IO-bound tasks concurrently using multiple processes. Threading: For certain IO-bound tasks, threading can be beneficial, especially when the Global Interpreter Lock (GIL) is not a significant bottleneck.","title":"41. What is IO-Bound Tasks ?"},{"location":"python/#42-what-is-cpu-bound-tasks","text":"Tasks that spend the majority of their time performing CPU computations and have limited interaction with input/output operations. Mathematical calculations, image processing, data manipulation, and other CPU-intensive operations. Multi-threading may not provide significant performance benefits due to the Global Interpreter Lock (GIL), which allows only one thread to execute Python bytecode at a time. Multiprocessing: Running CPU-bound tasks concurrently using multiple processes, which can take advantage of multiple CPU cores. Parallel computing: Using frameworks like concurrent.futures or joblib to parallelize computations across multiple cores.","title":"42. What is CPU-Bound Tasks ?"},{"location":"python/#python-coding","text":"A coding interview is intended to seek out creative thinkers and those who can adapt their solutions to rapidly changing and dynamic scenarios.","title":"Python Coding"},{"location":"python/#1-implement-a-linked-list-in-python","text":"from typing import Any class Node: def __init__(self,data:Any=None): self.data=data self.next=None def __repr__(self): return self.data class LinkedList: def __init__(self): self.head=None def __repr__(self) -> str: node=self.head nodes=[] while node is not None: nodes.append(node.data) node=node.next nodes.append(\"None\") return \" --> \".join(nodes) linked_list=LinkedList() node_a=Node(\"a\") linked_list.head=node_a node_b=Node(\"b\") node_a.next = node_b node_c=Node(\"c\") node_b.next=node_c print(linked_list)","title":"1. Implement a Linked List in Python"},{"location":"sql/","text":"SQL Interview Questions THEORETICAL 1. What is difference between SQL and MySQL ? SQL is a standard language. SQL is the core of the relational database which is used for accessing and managing database MySQL is a database management system and RDMS such as SQL Server. 2. What are the different subsets of SQL? Data Definition Language (DDL) \u2013 It allows you to perform various operations on the database such as CREATE, ALTER, and DELETE objects. Data Manipulation Language(DML) \u2013 It allows you to access and manipulate data. It helps you to insert, update, delete and retrieve data from the database. Data Control Language(DCL) \u2013 It allows you to control access to the database. Example \u2013 Grant, Revoke access permissions. 3. What is a Primary Key ? A Primary Key (PK) in SQL is a column (or collection of columns) or a set of columns that uniquely identifies each row in the table. Null values not allowed. 4. What are constraints ? Constraints in SQL are used to specify the limit on the data type of the table. It can be specified while creating or altering the table statement Example ; NOT NULL, CHECK, DEFAULT, UNIQUE, PK, FK 5. What is a unique key ? Uniquely identifies a single row in the table. Multiple values allowed per table. Null values allowed. 6. What is Foreign Key ? Foreign Key (FK) maintains referential integrity by enforcing a link between the data in two tables. The foreign key in the child table references the primary key in the parent table. 7. What is an Index? An index refers to a performance tuning method of allowing faster retrieval of records from the table. An index creates an entry for each value and hence it will be faster to retrieve data. 8. How many different types of index does SQL have ? Unique : This index does not allow the field to have duplicate values if the column is unique indexed. If a primary key is defined, a unique index can be applied automatically. Clustered : This index reorders the physical order of the table and searches based on the basis of key values. Each table can only have one clustered index. Non \u2013 Clustered : Non-Clustered Index does not alter the physical order of the table and maintains a logical order of the data. Each table can have many nonclustered indexes. 9. What is the difference between clustered and non-clustered index in SQL ? Clustered index is used for easy retrieval of data from the database and its faster whereas reading from non clustered index is relatively slower. One table can only have one clustered index whereas it can have many non clustered index. 10. What is difference between DROP and TRUNCATE ? DROP command removes a table and it cannot be rolled back from the database whereas TRUNCATE command removes all the rows from the table. 11. What is the main difference between \u2018BETWEEN\u2019 and \u2018IN\u2019 condition operators ? BETWEEN operator is used to display rows based on a range of values in a row whereas the IN condition operator is used to check for values contained in a specific set of values. 12. What is the difference between DELETE and TRUNCATE statements ? Delete command is used to delete a row in a table. You can rollback data after using delete statement. It is a DML command. It is slower than Truncate Truncate is used to delete all the rows from a table. You cannot rollback data. It is a DDL command. It is faster than Delete 13. What is the difference between CHAR and VARCHAR2 datatype in SQL ? Char is a data type in SQL that can store characters of a fixed length . Varchar is a datatype in SQL that holds characters of variable length. It uses dynamic memory location. 14. What are Entities and Relationships ? Entities : A person, place, or thing in the real world about which data can be stored in a database. Relationships : Relation or links between entities that have something to do with each other. 15. What is the ACID property in a database ? Atomicity : Atomicity refers to the transactions that are completely done or failed where transaction refers to a single logical operation of a data. It means if one part of any transaction fails, the entire transaction fails and the database state is left unchanged. Consistency : Consistency ensures that the data must meet all the validation rules. In simple words, you can say that your transaction never leaves the database without completing its state. Isolation : The main goal of isolation is concurrency control. Durability : Durability means that if a transaction has been committed, it will occur whatever may come in between such as power loss, crash or any sort of error. 16. Are NULL values same as that of zero or a blank space ? A NULL value is not at all same as that of zero or a blank space. NULL value represents a value which is unavailable, unknown, assigned or not applicable whereas a zero is a number and blank space is a character. 17. What is CLAUSE in SQL ? SQL clause helps to limit the result set by providing a condition to the query. A clause helps to filter the rows from the entire set of records. 18. What is the difference between \u2018HAVING\u2019 clause and a \u2018WHERE\u2019 clause ? HAVING clause can be used only with SELECT statement. It is usually used in a GROUP BY clause and whenever GROUP BY is not used, HAVING behaves like a WHERE clause. Having Clause is only used with the GROUP BY function in a query whereas WHERE Clause is applied to each row before they are a part of the GROUP BY function in a query. 19. What is a Stored Procedure in SQL ? A Stored Procedure is a function which consists of many SQL statements to access the database system. Several SQL statements are consolidated into a stored procedure and execute them whenever and wherever required which saves time and avoid writing code again and again. Pros : can be used as a modular programming which means create once, store and call for several times whenever it is required. This supports faster execution. It also reduces network traffic and provides better security to the data. Cons : The only disadvantage of Stored Procedure is that it can be executed only in the database and utilizes more memory in the database server. Following stored procedure called sp_GetProductDetails which accepts a parameter called @ProductId of type INT. The stored procedure selects the details of the product from the Products table where the ProductId matches the value of @ProductId. CREATE PROCEDURE sp_GetProductDetails @ProductId INT AS BEGIN SELECT ProductId, ProductName, Price FROM Products WHERE ProductId = @ProductId END You can then execute this stored procedure by passing a value for the @ProductId parameter: EXEC sp_GetProductDetails @ProductId = 1; 20. What are joins in SQL ? In SQL , a join is used to combine rows from two or more tables based on a related column between them. Joins are used to retrieve data that is spread across multiple tables in a database. There are several types of joins in SQL, including: INNER JOIN / JOIN: Returns only the rows that have matching values in both tables. LEFT JOIN: Returns all the rows from the left table and the matched rows from the right table. If there is no match in the right table, NULL values are returned for those columns. RIGHT JOIN: Returns all the rows from the right table and the matched rows from the left table. If there is no match in the left table, NULL values are returned for those columns. OUTER JOIN / FULL OUTER JOIN: Returns all the rows from both tables, with NULL values for the columns that do not have a match in the other table. -- INNER JOIN or just JOIN retrieves all users and likes that match each other -- ( where the id field in users matches a user_id in the likes table and vice versa ) SELECT users.name, likes.like FROM users JOIN likes ON users.id = likes.user_id; -- LEFT JOIN retrieves all users and its likes if there is any else sets NULL in the like field SELECT users.name, likes.like FROM users LEFT JOIN likes ON users.id = likes.user_id; -- RIGHT JOIN is like LEFT JOIN but retrieves all likes with all matching users or NULL if it doesn't have any matching user SELECT users.name, likes.like FROM users RIGHT JOIN likes ON users.id = likes.user_id; -- OUTER JOIN or OUTER LEFT and RIGHT with UNION (MySQL don't support FULL OUTER JOIN) retrieves all users and likes and matches them -- and sets NULL on any like without any match on user and same thing with user with no matching like SELECT users.name, likes.like FROM users LEFT OUTER JOIN likes ON users.id = likes.user_id UNION SELECT users.name, likes.like FROM users RIGHT OUTER JOIN likes ON users.id = likes.user_id 21. What is data integrity ? Data integrity in SQL refers to the accuracy , consistency , and reliability of data stored in a database. It ensures that the data is complete, correct, and valid. In other words, data integrity ensures that the data is of high quality and can be relied upon for decision-making, analysis, and reporting. There are different types of data integrity in SQL: Entity integrity: It ensures that each row in a table has a unique identifier, such as a primary key. Referential integrity: It ensures that the relationships between tables are maintained, and any foreign key values in one table refer to valid primary key values in another table. Domain integrity: It ensures that the data in each column of a table conforms to a specific set of rules, such as data type, range, and format. User-defined integrity: It allows users to define their own rules and constraints to ensure the accuracy and consistency of data. Overall, data integrity is critical for maintaining the reliability and consistency of data in a SQL database, and it helps to prevent errors, data loss, and data corruption. 22. What is view in SQL ? View is a virtual table that is based on the result of a SELECT query. It is not a physical table, but rather a stored SELECT statement that can be used to retrieve data in a specific format. A view is created using the CREATE VIEW statement, which defines the SELECT query used to generate the view's data. The result set of the SELECT query is then stored as a named object that can be used in other SQL statements just like a regular table. Views are useful for several reasons: They provide a simplified view of complex data. A view can be used to hide the complexity of a database schema and present a simpler view of the data that is more easily understood by users. They provide a way to control access to data. Views can be used to restrict access to certain columns or rows of data, so that users only see the data they need to see. They provide a way to aggregate data. Views can be used to group data together and calculate summary information, such as totals or averages, which can be used for reporting or analysis. They provide a way to combine data from multiple tables. Views can be used to combine data from several tables into a single view, making it easier to work with the data. Overall, views are a powerful tool in SQL that can help to simplify complex data, control access to data, and provide a flexible way to work with data from multiple tables. 23. What are the different types of a subquery ? Subquery is a query that is nested within another query. The subquery is used to retrieve data that will be used by the outer query to filter or manipulate the results. There are two types of subqueries: Single-row subquery: A single-row subquery is a subquery that returns only one row of data, which is then used by the outer query as a value in a comparison or calculation. For example, a single-row subquery can be used to find the maximum value in a column and then use that value to filter the results of the outer query. Multiple-row subquery: A multiple-row subquery is a subquery that returns multiple rows of data, which are then used by the outer query to filter or manipulate the results. For example, a multiple-row subquery can be used to find all the customers who have ordered a particular product and then use that information to generate a report. -- Single-row subquery SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products); -- Multiple-row subquery SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE product_id = 123); Subqueries can also be classified by where they are used in a SQL statement. There are three types of subqueries based on where they are used: Subquery in SELECT statement: A subquery can be used in the SELECT statement to retrieve data from another table or to perform a calculation using data from another table. Subquery in FROM clause: A subquery can be used in the FROM clause to create a temporary table that is used by the outer query to retrieve data. Subquery in WHERE clause: A subquery can be used in the WHERE clause to filter the results of the outer query based on a condition that involves data from another table. -- Subquery in SELECT statement SELECT product_name, (SELECT MAX(price) FROM products) AS max_price FROM products; -- Subquery in FROM clause SELECT * FROM (SELECT customer_id, SUM(total) as total_spent FROM orders GROUP BY customer_id) AS customer_totals WHERE total_spent > 1000; -- Subquery in WHERE clause SELECT * FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics'); 24. What is collation in SQL ? Collation in SQL refers to the rules used to compare and sort character data, which can affect the results of SQL queries that involve character data. It determines how characters are treated in terms of case sensitivity, accent marks, and other language-specific rules. SQL supports a wide variety of collations, and each database has a default collation that is used for all character data in the database. 25. What is trigger in SQL ? Trigger is a type of stored procedure that is automatically executed in response to certain database events, such as insert, update, or delete operations on a table. Triggers are commonly used in database applications to enforce data consistency and integrity, or to automate tasks that need to be performed whenever data changes. However, because triggers can have a significant impact on database performance, they should be used judiciously and only when necessary. Here is an example of a trigger in SQL: CREATE TRIGGER update_customer_orders AFTER INSERT ON orders FOR EACH ROW BEGIN UPDATE customer_orders SET total_order_amount = total_order_amount + NEW.total_amount WHERE customer_id = NEW.customer_id; END; This trigger will be executed automatically after a new row is inserted into the \"orders\" table. The 'NEW' keyword is used to refer to the new row being inserted, and the trigger will update the \"customer_orders\" table to add the total amount of the new order to the corresponding customer's total order amount. 26. What is table and field in SQL ? A table refers to a collection of data in an organised manner in form of rows and columns. A field refers to the number of columns in a table. For example: table: Students field: id, full_name, marks, register_date, origin 27. What are the different operators available in SQL ? SQL has several types of operators that can be used to perform various tasks on data in a database. The following are some of the most common SQL operators: Arithmetic Operators: SQL supports the basic arithmetic operators: + (addition), - (subtraction), * (multiplication), / (division), and % (modulus). Comparison Operators: SQL supports various comparison operators, including = (equal to), != or <> (not equal to), > (greater than), < (less than), >= (greater than or equal to), and <= (less than or equal to). Logical Operators: SQL supports three logical operators: AND, OR, and NOT. These operators are used to combine two or more conditions in a WHERE clause. String Operators: SQL supports the concatenation operator (||) to concatenate two or more strings, and the LIKE operator to search for a string pattern within a string. NULL Operators: SQL has the special operator IS NULL which is used to check if a value is NULL or not. Set Operators: SQL supports set operators such as UNION, UNION ALL, INTERSECT, and EXCEPT which can be used to combine results of multiple SELECT statements. 28. What is the difference between cross join and natural join ? Cross Join : A cross join (also known as a Cartesian join) returns the Cartesian product of the two tables involved. In other words, it returns all possible combinations of rows from both tables . This type of join does not use any join condition to filter rows. SELECT * FROM table1 CROSS JOIN table2; Natural Join : A natural join returns only the rows that have matching values in both tables , based on the column names that are the same in both tables. It automatically matches columns with the same name in both tables and returns only those rows where the values in those columns match. This type of join does not require a join condition to be specified explicitly. SELECT * FROM table1 NATURAL JOIN table2; In summary, the main difference between a cross join and a natural join is that a cross join returns all possible combinations of rows from both tables, while a natural join returns only the rows that have matching values in both tables based on the column names that are the same in both tables. 29. What is query optimization in SQL ? Query optimization is the process of improving the performance of a database query by selecting the most efficient method of executing it. The goal of query optimization is to minimize the response time of a query and reduce the amount of system resources needed to execute it. Query optimization involves several steps, including: Parsing and Translation : The first step in query optimization is to parse and translate the query into a form that can be processed by the database engine. This involves breaking the query down into its component parts, such as the SELECT, FROM, and WHERE clauses, and generating an execution plan. Cost Estimation : The next step is to estimate the cost of executing the query using different execution plans. This involves analyzing the size of the data, the complexity of the query, and the resources required to execute it. Plan Generation : Based on the cost estimates, the database engine generates multiple execution plans for the query. Each plan represents a different way of executing the query, and may involve different optimization techniques such as index selection, join ordering, and filtering. Plan Selection : The final step is to select the best execution plan based on the estimated cost. The selected plan is then executed to retrieve the query results. Query optimization is critical for improving the performance of database systems, especially for large, complex queries that involve multiple tables and join operations. By optimizing queries, database administrators can improve the overall efficiency of the system, reduce response times, and ensure that users can retrieve the information they need in a timely manner. 30. What is Normalization and what are the advantages of it ? Normalization is a process of organizing data in a database to reduce redundancy and dependency. It involves dividing a larger table into smaller tables and defining relationships between them to ensure that each table contains only related data. There are several levels of normalization, with each level representing a higher degree of organization and a lower level of redundancy. The most commonly used levels of normalization are: First Normal Form (1NF): This level ensures that each column in a table contains only atomic values (values that cannot be divided further), and that each row in the table is unique. Second Normal Form (2NF): This level ensures that each non-key column in a table is fully dependent on the primary key, and that there are no partial dependencies (where a non-key column depends on only part of the primary key). Third Normal Form (3NF): This level ensures that each non-key column in a table is dependent only on the primary key, and that there are no transitive dependencies (where a non-key column depends on another non-key column). The advantages of normalization include: Reduced Redundancy: Normalization helps to reduce data redundancy by eliminating duplicate data and storing it only once. This reduces the storage requirements and helps to improve the performance of the database. Improved Data Integrity: Normalization helps to improve data integrity by ensuring that each piece of data is stored in only one place. This reduces the likelihood of data inconsistencies and improves the accuracy of the data. Improved Query Performance: Normalization can help to improve query performance by breaking down large tables into smaller, more manageable tables. This allows queries to be executed more efficiently, reducing response times and improving overall performance. Easier Maintenance: Normalization makes it easier to maintain the database by simplifying data structures and reducing the complexity of the data model. This makes it easier to modify and update the database as needed. 31. What are the database design basics ? A properly designed database provides you with access to up-to-date, accurate information A good database design is, therefore, one that: Divides your information into subject-based tables to reduce redundant data. Provides Access with the information it requires to join the information in the tables together as needed. Helps support and ensure the accuracy and integrity of your information. Accommodates your data processing and reporting needs. The design process consists of the following steps: Define the Purpose and Scope of the Database : Before you start designing a database, you need to determine its purpose and scope. What is the database going to be used for? Who is going to use it? What data will it store? What queries will it need to support? These questions will help you determine the requirements of your database. Identify the Entities and Relationships : The next step is to identify the entities and relationships that will be represented in the database. An entity is anything that can be represented in the database, such as a person, place, or thing. Relationships define how entities are related to one another. Create a Data Model : Once you have identified the entities and relationships, you can create a data model that represents them in a graphical format. There are several types of data models, including entity-relationship (ER) models, UML diagrams, and data flow diagrams. Normalize the Data : Normalization is the process of organizing the data in a database so that it is consistent and efficient. This involves breaking down larger tables into smaller ones and eliminating redundant data. Define the Data Types and Constraints : After normalizing the data, you need to define the data types and constraints for each field in the database. This includes specifying the data type (e.g., string, integer, date) and any constraints on that data (e.g., length limits, required fields, unique values). Create the Tables and Relationships : Using the data model and data types, you can now create the tables and relationships in the database. Tables represent the entities, and relationships define how they are related to one another. Populate the Database : Once the tables are created, you can populate the database with data. This can be done manually or through an automated process, depending on the size of the database. Test the Database : After populating the database, you need to test it to make sure it functions correctly. This includes running queries, updating data, and verifying that the database performs as expected. Cornerstones to take into consideration: Data Integrity - Ensuring the accuracy and consistency of the data. Scalability - Ensuring the database can handle increasing amounts of data and users. Security - Protecting the database from unauthorized access and ensuring data privacy. Performance - Ensuring the database operates efficiently and responds quickly to user requests. Maintainability - Ensuring the database is easy to maintain and update over time. Usability - Ensuring the database is easy to use and navigate for end-users. Flexibility - Ensuring the database can adapt to changing business needs and requirements. 32. What is aggregate functions in MySQL ? An aggregate function is a function in SQL that performs a calculation on a set of values and returns a single value as the result. The set of values is typically a group of rows in a table, and the function is applied to one or more columns in the table List of aggregate functions in MySQL FUNCTION DESCRIPTION AVG() Return the average value of the argument BIT_AND() Return bitwise AND BIT_OR() Return bitwise OR BIT_XOR() Return bitwise XOR COUNT() Return a count of the number of rows returned COUNT(DISTINCT) Return the count of a number of different values GROUP_CONCAT() Return a concatenated string JSON_ARRAYAGG() Return result set as a single JSON array JSON_OBJECTAGG() Return result set as a single JSON object MAX() Return the maximum value MIN() Return the minimum value STD() Return the population standard deviation STDDEV() Return the population standard deviation STDDEV_POP() Return the population standard deviation STDDEV_SAMP() Return the sample standard deviation SUM() Return the sum VAR_POP() Return the population standard variance VAR_SAMP() Return the sample variance VARIANCE() Return the population standard variance Here are some examples of aggregate functions in SQL: -- Calculate the average salary of all employees SELECT AVG(salary) FROM employees; -- Calculate the total number of items in a store SELECT COUNT(*) FROM inventory; -- Count the number of distinct product categories in a store SELECT COUNT(DISTINCT category) FROM products; -- Concatenate the names of all employees in a department SELECT GROUP_CONCAT(name SEPARATOR ', ') FROM employees WHERE department='Sales'; -- Return the highest and lowest salary among all employees SELECT MAX(salary) as highest FROM employees; SELECT MIN(salary) as lowest FROM employees; -- Calculate the sum of all sales in a store SELECT SUM(sales) FROM store; -- Calculate the population standard deviation of product prices SELECT STDDEV_POP(price) FROM products; -- Calculate the sample variance of customer ages SELECT VAR_SAMP(age) FROM customers; 33. What is difference between UNION and UNION ALL in SQL ? UNION merges the contents of two structurally-compatible tables into a single combined table. The difference between UNION and UNION ALL is that UNION will omit duplicate records whereas UNION ALL will include duplicate records. The performance of UNION ALL will typically be better than UNION, since UNION requires the server to do the additional work of removing any duplicates 34. What is database ? A database is an organized collection of structured data that can be stored, easily accessed, managed, and retrieved digitally from a remote or local computer system. 35. What is denormalization ? Denormalization is the opposite of normalization; redundant data is added to speed up complex queries that have multiple tables that need to be joined. Optimization of the read performance of a database is attempted by adding or grouping redundant copies of data. 36. What is data warehouse ? A data warehouse is a large store of accumulated data, from a wide range of sources, within an organization. The data helps drive business decisions. 37. What is difference between views and tables ? Views Tables A view is a virtual table that is extracted from a database A table is structured with a set number of columns and a boundless number of rows A view does not hold data itself A table contains data and stores it in databases A view is utilized to query certain information contained in a few distinct tables A table holds fundamental client information and cases of a characterized object In a view, we will get frequently queried information In a table, changing the information in the database changes the information that appears in the view 38. What is SQL Window functions ? SQL window functions are a type of SQL function that allow you to perform calculations across a set of rows that are related to the current row. They are commonly used in analytic queries to calculate rankings, cumulative sums, moving averages, and other types of aggregations. Window functions are similar to the aggregation done in the GROUP BY clause. However, rows are not grouped into a single row, each row retains their separate identity. Window functions in SQL offer more flexibility, increased query efficiency, simplified code, and improved accuracy in data analysis, making them a powerful tool for performing complex calculations and analysis on your data within a single SQL query. Here is a list of some common window functions in SQL, along with examples: ROW_NUMBER() : assigns a unique integer value to each row in the result set. SELECT ROW_NUMBER() OVER() AS row_num, name, age FROM customers; RANK() : assigns a rank to each row based on its value relative to the other rows. SELECT RANK() OVER(ORDER BY salary DESC) AS rank, name, salary FROM employees; DENSE_RANK() : assigns a rank to each row based on its value relative to the other rows, but without any gaps in the ranking. SELECT DENSE_RANK() OVER(ORDER BY score DESC) AS dense_rank, name, score FROM students; SUM() , AVG() , MIN() , MAX() : calculate an aggregate value across the rows in the window. SELECT department, AVG(salary) OVER(PARTITION BY department) AS avg_salary FROM employees; LAG() and LEAD() : retrieve the value from a previous or subsequent row in the window. SELECT name, score, LAG(score, 1) OVER(ORDER BY score DESC) AS prev_score, LEAD(score, 1) OVER(ORDER BY score DESC) AS next_score FROM students; NTILE() : divides the result set into a specified number of groups, assigning a group number to each row. SELECT NTILE(4) OVER(ORDER BY salary DESC) AS quartile, name, salary FROM employees; FIRST_VALUE() and LAST_VALUE() : retrieve the first or last value in the window. SELECT name, score, FIRST_VALUE(score) OVER(ORDER BY score DESC) AS highest_score, LAST_VALUE(score) OVER(ORDER BY score DESC) AS lowest_score FROM students; 39. What is order of operations in SQL ? The order of operations in SQL, also known as operator precedence, determines the order in which the different operators and functions in a SQL statement are evaluated. The order of operations is important in ensuring that the SQL statement is evaluated correctly and produces the intended results. The following is the order of operations in SQL, from highest to lowest precedence: Parentheses: Expressions enclosed in parentheses are evaluated first. Unary operators: Unary operators such as NOT, +, and - are evaluated next. Multiplication, Division, and Modulus: These arithmetic operators are evaluated next, from left to right. Addition and Subtraction: These arithmetic operators are evaluated next, from left to right. Comparison operators: Comparison operators such as =, <>, <, <=, >, and >= are evaluated next. Logical operators: Logical operators such as AND, OR, and NOT are evaluated next. BETWEEN, IN, LIKE, and EXISTS: These operators are evaluated next. CASE expressions: CASE expressions are evaluated next. Aggregate functions: Aggregate functions such as COUNT, SUM, AVG, MAX, and MIN are evaluated next. Window functions: Window functions are evaluated next. DISTINCT, GROUP BY, and HAVING: These operators are evaluated next. SELECT: The SELECT statement is evaluated last. 40. How many type of key does SQL have ? Primary Key : A primary key is a unique identifier for each record in a table. It is used to ensure that each record can be identified uniquely, and it is often used as the basis for relationships with other tables. Foreign Key : A foreign key is a field in a table that refers to the primary key of another table. It is used to establish a relationship between two tables, and it ensures that data in one table can be linked to data in another table. Candidate Key : A candidate key is a field or combination of fields that can be used as a primary key for a table. It is an alternative key that can be used instead of the primary key. Composite Key : A composite key is a primary key that consists of two or more fields. It is used when no single field can uniquely identify a record in a table. Unique Key : A unique key is a field or combination of fields that ensures that each record in a table is unique. It is similar to a primary key, but it does not have to be used as the basis for relationships with other tables. Overall, keys are used to ensure data integrity and to establish relationships between tables in a database. They are a fundamental concept in SQL and are essential for managing and manipulating data effectively. 41. What is DBMS ? DBMS stands for Database Management System. It is a software system that allows users to create, manage, and manipulate databases. A database is a collection of data that is organized and stored in a way that allows users to easily retrieve and update it. A DBMS provides a framework for creating, storing, and managing data in a structured format. It provides users with an interface to interact with the database and perform tasks such as adding, modifying, deleting, and retrieving data. Some popular examples of DBMS include MySQL, Oracle, Microsoft SQL Server, and MongoDB. 42. What is scalar functions in SQL ? Scalar functions in SQL are functions that take one or more input parameters and return a single value as the result. These functions operate on individual rows and can be used in SELECT statements, WHERE clauses, and other parts of SQL queries where a single value is expected. There are various types of scalar functions available in SQL, including: String functions: These functions perform operations on strings, such as concatenation, conversion, and searching. Date and time functions: These functions perform operations on dates and times, such as calculating the difference between two dates or adding a certain number of days to a date. Numeric functions: These functions perform operations on numeric values, such as rounding, truncation, and conversion. Conversion functions: These functions convert one data type to another, such as converting a string to a number or a date to a string. Examples of scalar functions in SQL include: LEN(): Returns the length of a string. DATEADD(): Adds a specified time interval to a date. ROUND(): Rounds a numeric value to a specified precision. CAST(): Converts a value from one data type to another. Scalar functions can be very useful in SQL queries, as they allow you to perform various calculations and manipulations on data without the need for complex programming logic. 43. What is OLTP ? OLTP stands for Online Transaction Processing, which is a type of computer system that manages and processes transaction-oriented applications, such as financial transactions, order processing, and inventory management. OLTP systems are designed to handle high volumes of small transactions in real-time or near real-time, typically with short response times. OLTP databases typically use normalized data structures to ensure data integrity, with tables organized around entities and relationships. These systems are optimized for data reads and writes, and are usually built on relational database management systems (RDBMS) like Oracle, SQL Server, or MySQL. OLTP systems are commonly used in businesses and organizations that need to process a high volume of transactions quickly and efficiently, such as banks, airlines, and e-commerce websites. 44. What is OLAP ? OLAP stands for Online Analytical Processing, which is a computer-based approach to analyzing data that allows users to access and analyze large sets of data from multiple perspectives. OLAP systems are designed for complex data analysis, and are optimized for querying and reporting. OLAP databases typically use denormalized data structures to provide fast and flexible access to data. OLAP systems allow users to query data using dimensions, measures, and hierarchies to analyze data across different dimensions, such as time, geography, and product lines. OLAP systems are commonly used in business intelligence and data analysis applications, where users need to quickly analyze large amounts of data to identify trends, patterns, and insights. They are typically built on multidimensional database management systems (MDBMS) like Microsoft Analysis Services, Oracle Essbase, or SAP BusinessObjects. 45. What is difference between OLAP and OLTP ? OLTP (Online Transaction Processing) and OLAP (Online Analytical Processing) are two different types of computer-based systems designed to serve different purposes: Purpose : OLTP is designed to manage and process transaction-oriented applications in real-time or near real-time, while OLAP is designed for complex data analysis and querying. Data Structure : OLTP databases typically use normalized data structures to ensure data integrity, while OLAP databases typically use denormalized data structures to provide fast and flexible access to data. Usage : OLTP systems are optimized for data reads and writes, and are usually built on relational database management systems (RDBMS) like Oracle or SQL Server. OLAP systems are optimized for querying and reporting, and are typically built on multidimensional database management systems (MDBMS) like Microsoft Analysis Services or Oracle Essbase. Queries : OLTP systems typically involve simple queries, such as retrieving a single record, while OLAP systems involve complex queries that analyze data across multiple dimensions. Users : OLTP systems are designed for transactional users, such as bank tellers or customer service representatives, while OLAP systems are designed for analytical users, such as business analysts or data scientists. In summary, OLTP systems are designed for transaction processing and OLAP systems are designed for data analysis and querying. 46. What is pattern matching in SQL ? Pattern matching is a technique used in SQL to search for specific patterns or substrings within a larger string of text data. SQL provides several operators that can be used to perform pattern matching, including the LIKE operator and the regular expression functions. The LIKE operator is used to compare a string to a pattern and returns a boolean value indicating whether the string matches the pattern or not. The LIKE operator supports two wildcards: The percent sign (%) matches any sequence of zero or more characters. The underscore (_) matches any single character. For example, the following query retrieves all records where the value of the \"name\" column starts with the letter \"J\": SELECT * FROM table_name WHERE name LIKE 'J%'; In addition to the LIKE operator, SQL also provides regular expression functions such as REGEXP_LIKE , REGEXP_REPLACE , and REGEXP_INSTR , which allow for more advanced pattern matching capabilities. These functions can be used to search for patterns based on regular expressions, which are a powerful tool for matching complex patterns of text. 47. What is Common Table Expression (CTE) in SQL ? CTEs work as virtual tables (with records and columns), created during the execution of a query, used by the query, and eliminated after query execution. Each SQL CTE is like a named query, whose result is stored in a virtual table (a CTE) to be referenced later in the main query. WITH london1_monthly_revenue AS ( SELECT EXTRACT(MONTH FROM date) as month, SUM(unit_price * quantity) AS revenue FROM sales WHERE EXTRACT(YEAR FROM date) = 2021 AND branch = 'London-1' GROUP BY 1 ), london2_monthly_revenue AS ( SELECT EXTRACT(MONTH FROM date) as month, SUM(unit_price * quantity) AS revenue FROM sales WHERE EXTRACT(YEAR FROM date) = 2021 AND branch = 'London-2' GROUP BY 1 ) SELECT l1.month, l1.revenue + l2.revenue AS london_revenue, l1.revenue AS london1_revenue, l2.revenue AS london2_revenue FROM london1_monthly_revenue l1, london2_monthly_revenue l2 WHERE l1.month = l2.month CODING 1. How to insert NULL values in a column while inserting the data? To insert a NULL value into a column while inserting data into a table, you can use the keyword NULL in place of the actual value. For example, consider a table named \"employees\" with columns \"employee_id\", \"first_name\", \"last_name\", and \"email\". If you want to insert a NULL value into the email column, you can do it as follows: INSERT INTO employees (employee_id, first_name, last_name, email) VALUES (1, 'John', 'Doe', NULL); Another way to insert a NULL value into a column is to omit it from the column list in the INSERT statement. If you omit a column from the list, the database will insert a NULL value into the column by default. INSERT INTO employees (employee_id, first_name, last_name) VALUES (1, 'John', 'Doe'); 2. How can you select unique records from a table ? To select unique records from a table, you can use the DISTINCT keyword in a SELECT statement. The DISTINCT keyword filters out duplicate values and returns only the unique values in the specified column or columns. For example, consider a table named \"employees\" with columns \"employee_id\", \"first_name\", \"last_name\", and \"department\". To select only the unique department names from the table, you can use the following query: SELECT DISTINCT department FROM employees; If you want to select unique records based on multiple columns, you can specify those columns in the SELECT statement, like this: SELECT DISTINCT column1, column2, column3 FROM table_name; NOTE : It's worth noting that using the DISTINCT keyword can have performance implications, especially on large tables. If you're working with a large dataset, you may want to consider other techniques such as grouping and aggregation to identify unique records. 3. Regular Expression Querry Write a query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates. -- option 1 SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]'; -- option 2 SELECT DISTINCT CITY FROM STATION WHERE SUBSTR(CITY, 1, 1) IN ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'); 4. Removing Duplicate Values Write a query that remove duplicate values from table -- prepare environment CREATE DATABASE family_db; USE family_db; CREATE TABLE family ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, age INT NOT NULL, gender ENUM('male', 'female') NOT NULL, relationship VARCHAR(20) NOT NULL ); INSERT INTO family (name, age, gender, relationship) VALUES ('John Smith', 45, 'male', 'father'), ('Jane Smith', 42, 'female', 'mother'), ('Bob Smith', 18, 'male', 'brother'), ('Sally Smith', 15, 'female', 'sister'), ('Tom Johnson', 55, 'male', 'grandfather'), ('Mary Johnson', 50, 'female', 'grandmother'), ('Jim Johnson', 28, 'male', 'uncle'), ('Karen Johnson', 25, 'female', 'aunt'), ('Mark Davis', 30, 'male', 'cousin'), ('Sarah Davis', 28, 'female', 'cousin'); Following code uses a self-join on the \"family\" table to compare each row with all other rows in the table, looking for duplicates based on the values of the name, age, gender, and relationship columns. The WHERE clause filters the results to only include rows where the ID of the first row is greater than the ID of the second row (to avoid deleting the original row), and where all other column values are identical. The DELETE statement then removes the duplicate row from the table. -- OPTION 1 (self-join) DELETE f1 FROM family f1, family f2 WHERE f1.id > f2.id AND f1.name = f2.name AND f1.age = f2.age AND f1.gender = f2.gender AND f1.relationship = f2.relationship; Instead of using a self-join, which can be slow for large tables, you can use a temporary table to store the distinct rows, and then replace the original table with the temporary table. -- OPTION 2 (temp table and distinct) -- Create a new temporary table with the same schema as the original table CREATE TEMPORARY TABLE tmp_family LIKE family; -- Insert the distinct rows from the original table into the temporary table INSERT INTO tmp_family SELECT DISTINCT * FROM family; -- Drop the original table: DROP TABLE family; -- Rename the temporary table to the original table name RENAME TABLE tmp_family TO family; This approach is faster and more efficient than using a self-join, as it only scans the original table once, and it avoids the overhead of deleting rows one by one. However, it may require more disk space to create the temporary table, so make sure you have enough free space on your server before running this code. 5. What is the output of following statements and why ? -- 1st statement select '123ABC' * 3; -- 2nd statement select 'ABC123' * 3; To make the multiplication with 3 MySQL automatically converts the string 123 into a number.But conversion to a number starts from left to right. If the conversion is not possible the result is 0 Result of select '123ABC' * 3; is 369 but result of select 'ABC123' * 3; is 0","title":"SQL"},{"location":"sql/#sql-interview-questions","text":"","title":"SQL Interview Questions"},{"location":"sql/#theoretical","text":"","title":"THEORETICAL"},{"location":"sql/#1-what-is-difference-between-sql-and-mysql","text":"SQL is a standard language. SQL is the core of the relational database which is used for accessing and managing database MySQL is a database management system and RDMS such as SQL Server.","title":"1. What is difference between SQL and MySQL ?"},{"location":"sql/#2-what-are-the-different-subsets-of-sql","text":"Data Definition Language (DDL) \u2013 It allows you to perform various operations on the database such as CREATE, ALTER, and DELETE objects. Data Manipulation Language(DML) \u2013 It allows you to access and manipulate data. It helps you to insert, update, delete and retrieve data from the database. Data Control Language(DCL) \u2013 It allows you to control access to the database. Example \u2013 Grant, Revoke access permissions.","title":"2. What are the different subsets of SQL?"},{"location":"sql/#3-what-is-a-primary-key","text":"A Primary Key (PK) in SQL is a column (or collection of columns) or a set of columns that uniquely identifies each row in the table. Null values not allowed.","title":"3. What is a Primary Key ?"},{"location":"sql/#4-what-are-constraints","text":"Constraints in SQL are used to specify the limit on the data type of the table. It can be specified while creating or altering the table statement Example ; NOT NULL, CHECK, DEFAULT, UNIQUE, PK, FK","title":"4. What are constraints ?"},{"location":"sql/#5-what-is-a-unique-key","text":"Uniquely identifies a single row in the table. Multiple values allowed per table. Null values allowed.","title":"5. What is a unique key ?"},{"location":"sql/#6-what-is-foreign-key","text":"Foreign Key (FK) maintains referential integrity by enforcing a link between the data in two tables. The foreign key in the child table references the primary key in the parent table.","title":"6. What is Foreign Key ?"},{"location":"sql/#7-what-is-an-index","text":"An index refers to a performance tuning method of allowing faster retrieval of records from the table. An index creates an entry for each value and hence it will be faster to retrieve data.","title":"7. What is an Index?"},{"location":"sql/#8-how-many-different-types-of-index-does-sql-have","text":"Unique : This index does not allow the field to have duplicate values if the column is unique indexed. If a primary key is defined, a unique index can be applied automatically. Clustered : This index reorders the physical order of the table and searches based on the basis of key values. Each table can only have one clustered index. Non \u2013 Clustered : Non-Clustered Index does not alter the physical order of the table and maintains a logical order of the data. Each table can have many nonclustered indexes.","title":"8. How many different types of index does SQL have ?"},{"location":"sql/#9-what-is-the-difference-between-clustered-and-non-clustered-index-in-sql","text":"Clustered index is used for easy retrieval of data from the database and its faster whereas reading from non clustered index is relatively slower. One table can only have one clustered index whereas it can have many non clustered index.","title":"9. What is the difference between clustered and non-clustered index in SQL ?"},{"location":"sql/#10-what-is-difference-between-drop-and-truncate","text":"DROP command removes a table and it cannot be rolled back from the database whereas TRUNCATE command removes all the rows from the table.","title":"10. What is difference between DROP and TRUNCATE ?"},{"location":"sql/#11-what-is-the-main-difference-between-between-and-in-condition-operators","text":"BETWEEN operator is used to display rows based on a range of values in a row whereas the IN condition operator is used to check for values contained in a specific set of values.","title":"11. What is the main difference between \u2018BETWEEN\u2019 and \u2018IN\u2019 condition operators ?"},{"location":"sql/#12-what-is-the-difference-between-delete-and-truncate-statements","text":"Delete command is used to delete a row in a table. You can rollback data after using delete statement. It is a DML command. It is slower than Truncate Truncate is used to delete all the rows from a table. You cannot rollback data. It is a DDL command. It is faster than Delete","title":"12. What is the difference between DELETE and TRUNCATE statements ?"},{"location":"sql/#13-what-is-the-difference-between-char-and-varchar2-datatype-in-sql","text":"Char is a data type in SQL that can store characters of a fixed length . Varchar is a datatype in SQL that holds characters of variable length. It uses dynamic memory location.","title":"13. What is the difference between CHAR and VARCHAR2 datatype in SQL ?"},{"location":"sql/#14-what-are-entities-and-relationships","text":"Entities : A person, place, or thing in the real world about which data can be stored in a database. Relationships : Relation or links between entities that have something to do with each other.","title":"14. What are Entities and Relationships ?"},{"location":"sql/#15-what-is-the-acid-property-in-a-database","text":"Atomicity : Atomicity refers to the transactions that are completely done or failed where transaction refers to a single logical operation of a data. It means if one part of any transaction fails, the entire transaction fails and the database state is left unchanged. Consistency : Consistency ensures that the data must meet all the validation rules. In simple words, you can say that your transaction never leaves the database without completing its state. Isolation : The main goal of isolation is concurrency control. Durability : Durability means that if a transaction has been committed, it will occur whatever may come in between such as power loss, crash or any sort of error.","title":"15. What is the ACID property in a database ?"},{"location":"sql/#16-are-null-values-same-as-that-of-zero-or-a-blank-space","text":"A NULL value is not at all same as that of zero or a blank space. NULL value represents a value which is unavailable, unknown, assigned or not applicable whereas a zero is a number and blank space is a character.","title":"16. Are NULL values same as that of zero or a blank space ?"},{"location":"sql/#17-what-is-clause-in-sql","text":"SQL clause helps to limit the result set by providing a condition to the query. A clause helps to filter the rows from the entire set of records.","title":"17. What is CLAUSE in SQL ?"},{"location":"sql/#18-what-is-the-difference-between-having-clause-and-a-where-clause","text":"HAVING clause can be used only with SELECT statement. It is usually used in a GROUP BY clause and whenever GROUP BY is not used, HAVING behaves like a WHERE clause. Having Clause is only used with the GROUP BY function in a query whereas WHERE Clause is applied to each row before they are a part of the GROUP BY function in a query.","title":"18. What is the difference between \u2018HAVING\u2019 clause and a \u2018WHERE\u2019 clause ?"},{"location":"sql/#19-what-is-a-stored-procedure-in-sql","text":"A Stored Procedure is a function which consists of many SQL statements to access the database system. Several SQL statements are consolidated into a stored procedure and execute them whenever and wherever required which saves time and avoid writing code again and again. Pros : can be used as a modular programming which means create once, store and call for several times whenever it is required. This supports faster execution. It also reduces network traffic and provides better security to the data. Cons : The only disadvantage of Stored Procedure is that it can be executed only in the database and utilizes more memory in the database server. Following stored procedure called sp_GetProductDetails which accepts a parameter called @ProductId of type INT. The stored procedure selects the details of the product from the Products table where the ProductId matches the value of @ProductId. CREATE PROCEDURE sp_GetProductDetails @ProductId INT AS BEGIN SELECT ProductId, ProductName, Price FROM Products WHERE ProductId = @ProductId END You can then execute this stored procedure by passing a value for the @ProductId parameter: EXEC sp_GetProductDetails @ProductId = 1;","title":"19. What is a Stored Procedure in SQL ?"},{"location":"sql/#20-what-are-joins-in-sql","text":"In SQL , a join is used to combine rows from two or more tables based on a related column between them. Joins are used to retrieve data that is spread across multiple tables in a database. There are several types of joins in SQL, including: INNER JOIN / JOIN: Returns only the rows that have matching values in both tables. LEFT JOIN: Returns all the rows from the left table and the matched rows from the right table. If there is no match in the right table, NULL values are returned for those columns. RIGHT JOIN: Returns all the rows from the right table and the matched rows from the left table. If there is no match in the left table, NULL values are returned for those columns. OUTER JOIN / FULL OUTER JOIN: Returns all the rows from both tables, with NULL values for the columns that do not have a match in the other table. -- INNER JOIN or just JOIN retrieves all users and likes that match each other -- ( where the id field in users matches a user_id in the likes table and vice versa ) SELECT users.name, likes.like FROM users JOIN likes ON users.id = likes.user_id; -- LEFT JOIN retrieves all users and its likes if there is any else sets NULL in the like field SELECT users.name, likes.like FROM users LEFT JOIN likes ON users.id = likes.user_id; -- RIGHT JOIN is like LEFT JOIN but retrieves all likes with all matching users or NULL if it doesn't have any matching user SELECT users.name, likes.like FROM users RIGHT JOIN likes ON users.id = likes.user_id; -- OUTER JOIN or OUTER LEFT and RIGHT with UNION (MySQL don't support FULL OUTER JOIN) retrieves all users and likes and matches them -- and sets NULL on any like without any match on user and same thing with user with no matching like SELECT users.name, likes.like FROM users LEFT OUTER JOIN likes ON users.id = likes.user_id UNION SELECT users.name, likes.like FROM users RIGHT OUTER JOIN likes ON users.id = likes.user_id","title":"20. What are joins in SQL ?"},{"location":"sql/#21-what-is-data-integrity","text":"Data integrity in SQL refers to the accuracy , consistency , and reliability of data stored in a database. It ensures that the data is complete, correct, and valid. In other words, data integrity ensures that the data is of high quality and can be relied upon for decision-making, analysis, and reporting. There are different types of data integrity in SQL: Entity integrity: It ensures that each row in a table has a unique identifier, such as a primary key. Referential integrity: It ensures that the relationships between tables are maintained, and any foreign key values in one table refer to valid primary key values in another table. Domain integrity: It ensures that the data in each column of a table conforms to a specific set of rules, such as data type, range, and format. User-defined integrity: It allows users to define their own rules and constraints to ensure the accuracy and consistency of data. Overall, data integrity is critical for maintaining the reliability and consistency of data in a SQL database, and it helps to prevent errors, data loss, and data corruption.","title":"21. What is data integrity ?"},{"location":"sql/#22-what-is-view-in-sql","text":"View is a virtual table that is based on the result of a SELECT query. It is not a physical table, but rather a stored SELECT statement that can be used to retrieve data in a specific format. A view is created using the CREATE VIEW statement, which defines the SELECT query used to generate the view's data. The result set of the SELECT query is then stored as a named object that can be used in other SQL statements just like a regular table. Views are useful for several reasons: They provide a simplified view of complex data. A view can be used to hide the complexity of a database schema and present a simpler view of the data that is more easily understood by users. They provide a way to control access to data. Views can be used to restrict access to certain columns or rows of data, so that users only see the data they need to see. They provide a way to aggregate data. Views can be used to group data together and calculate summary information, such as totals or averages, which can be used for reporting or analysis. They provide a way to combine data from multiple tables. Views can be used to combine data from several tables into a single view, making it easier to work with the data. Overall, views are a powerful tool in SQL that can help to simplify complex data, control access to data, and provide a flexible way to work with data from multiple tables.","title":"22. What is view in SQL ?"},{"location":"sql/#23-what-are-the-different-types-of-a-subquery","text":"Subquery is a query that is nested within another query. The subquery is used to retrieve data that will be used by the outer query to filter or manipulate the results. There are two types of subqueries: Single-row subquery: A single-row subquery is a subquery that returns only one row of data, which is then used by the outer query as a value in a comparison or calculation. For example, a single-row subquery can be used to find the maximum value in a column and then use that value to filter the results of the outer query. Multiple-row subquery: A multiple-row subquery is a subquery that returns multiple rows of data, which are then used by the outer query to filter or manipulate the results. For example, a multiple-row subquery can be used to find all the customers who have ordered a particular product and then use that information to generate a report. -- Single-row subquery SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products); -- Multiple-row subquery SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE product_id = 123); Subqueries can also be classified by where they are used in a SQL statement. There are three types of subqueries based on where they are used: Subquery in SELECT statement: A subquery can be used in the SELECT statement to retrieve data from another table or to perform a calculation using data from another table. Subquery in FROM clause: A subquery can be used in the FROM clause to create a temporary table that is used by the outer query to retrieve data. Subquery in WHERE clause: A subquery can be used in the WHERE clause to filter the results of the outer query based on a condition that involves data from another table. -- Subquery in SELECT statement SELECT product_name, (SELECT MAX(price) FROM products) AS max_price FROM products; -- Subquery in FROM clause SELECT * FROM (SELECT customer_id, SUM(total) as total_spent FROM orders GROUP BY customer_id) AS customer_totals WHERE total_spent > 1000; -- Subquery in WHERE clause SELECT * FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');","title":"23. What are the different types of a subquery ?"},{"location":"sql/#24-what-is-collation-in-sql","text":"Collation in SQL refers to the rules used to compare and sort character data, which can affect the results of SQL queries that involve character data. It determines how characters are treated in terms of case sensitivity, accent marks, and other language-specific rules. SQL supports a wide variety of collations, and each database has a default collation that is used for all character data in the database.","title":"24. What is collation in SQL ?"},{"location":"sql/#25-what-is-trigger-in-sql","text":"Trigger is a type of stored procedure that is automatically executed in response to certain database events, such as insert, update, or delete operations on a table. Triggers are commonly used in database applications to enforce data consistency and integrity, or to automate tasks that need to be performed whenever data changes. However, because triggers can have a significant impact on database performance, they should be used judiciously and only when necessary. Here is an example of a trigger in SQL: CREATE TRIGGER update_customer_orders AFTER INSERT ON orders FOR EACH ROW BEGIN UPDATE customer_orders SET total_order_amount = total_order_amount + NEW.total_amount WHERE customer_id = NEW.customer_id; END; This trigger will be executed automatically after a new row is inserted into the \"orders\" table. The 'NEW' keyword is used to refer to the new row being inserted, and the trigger will update the \"customer_orders\" table to add the total amount of the new order to the corresponding customer's total order amount.","title":"25. What is trigger in SQL ?"},{"location":"sql/#26-what-is-table-and-field-in-sql","text":"A table refers to a collection of data in an organised manner in form of rows and columns. A field refers to the number of columns in a table. For example: table: Students field: id, full_name, marks, register_date, origin","title":"26. What is table and field in SQL ?"},{"location":"sql/#27-what-are-the-different-operators-available-in-sql","text":"SQL has several types of operators that can be used to perform various tasks on data in a database. The following are some of the most common SQL operators: Arithmetic Operators: SQL supports the basic arithmetic operators: + (addition), - (subtraction), * (multiplication), / (division), and % (modulus). Comparison Operators: SQL supports various comparison operators, including = (equal to), != or <> (not equal to), > (greater than), < (less than), >= (greater than or equal to), and <= (less than or equal to). Logical Operators: SQL supports three logical operators: AND, OR, and NOT. These operators are used to combine two or more conditions in a WHERE clause. String Operators: SQL supports the concatenation operator (||) to concatenate two or more strings, and the LIKE operator to search for a string pattern within a string. NULL Operators: SQL has the special operator IS NULL which is used to check if a value is NULL or not. Set Operators: SQL supports set operators such as UNION, UNION ALL, INTERSECT, and EXCEPT which can be used to combine results of multiple SELECT statements.","title":"27. What are the different operators available in SQL ?"},{"location":"sql/#28-what-is-the-difference-between-cross-join-and-natural-join","text":"Cross Join : A cross join (also known as a Cartesian join) returns the Cartesian product of the two tables involved. In other words, it returns all possible combinations of rows from both tables . This type of join does not use any join condition to filter rows. SELECT * FROM table1 CROSS JOIN table2; Natural Join : A natural join returns only the rows that have matching values in both tables , based on the column names that are the same in both tables. It automatically matches columns with the same name in both tables and returns only those rows where the values in those columns match. This type of join does not require a join condition to be specified explicitly. SELECT * FROM table1 NATURAL JOIN table2; In summary, the main difference between a cross join and a natural join is that a cross join returns all possible combinations of rows from both tables, while a natural join returns only the rows that have matching values in both tables based on the column names that are the same in both tables.","title":"28. What is the difference between cross join and natural join ?"},{"location":"sql/#29-what-is-query-optimization-in-sql","text":"Query optimization is the process of improving the performance of a database query by selecting the most efficient method of executing it. The goal of query optimization is to minimize the response time of a query and reduce the amount of system resources needed to execute it. Query optimization involves several steps, including: Parsing and Translation : The first step in query optimization is to parse and translate the query into a form that can be processed by the database engine. This involves breaking the query down into its component parts, such as the SELECT, FROM, and WHERE clauses, and generating an execution plan. Cost Estimation : The next step is to estimate the cost of executing the query using different execution plans. This involves analyzing the size of the data, the complexity of the query, and the resources required to execute it. Plan Generation : Based on the cost estimates, the database engine generates multiple execution plans for the query. Each plan represents a different way of executing the query, and may involve different optimization techniques such as index selection, join ordering, and filtering. Plan Selection : The final step is to select the best execution plan based on the estimated cost. The selected plan is then executed to retrieve the query results. Query optimization is critical for improving the performance of database systems, especially for large, complex queries that involve multiple tables and join operations. By optimizing queries, database administrators can improve the overall efficiency of the system, reduce response times, and ensure that users can retrieve the information they need in a timely manner.","title":"29. What is query optimization in SQL ?"},{"location":"sql/#30-what-is-normalization-and-what-are-the-advantages-of-it","text":"Normalization is a process of organizing data in a database to reduce redundancy and dependency. It involves dividing a larger table into smaller tables and defining relationships between them to ensure that each table contains only related data. There are several levels of normalization, with each level representing a higher degree of organization and a lower level of redundancy. The most commonly used levels of normalization are: First Normal Form (1NF): This level ensures that each column in a table contains only atomic values (values that cannot be divided further), and that each row in the table is unique. Second Normal Form (2NF): This level ensures that each non-key column in a table is fully dependent on the primary key, and that there are no partial dependencies (where a non-key column depends on only part of the primary key). Third Normal Form (3NF): This level ensures that each non-key column in a table is dependent only on the primary key, and that there are no transitive dependencies (where a non-key column depends on another non-key column). The advantages of normalization include: Reduced Redundancy: Normalization helps to reduce data redundancy by eliminating duplicate data and storing it only once. This reduces the storage requirements and helps to improve the performance of the database. Improved Data Integrity: Normalization helps to improve data integrity by ensuring that each piece of data is stored in only one place. This reduces the likelihood of data inconsistencies and improves the accuracy of the data. Improved Query Performance: Normalization can help to improve query performance by breaking down large tables into smaller, more manageable tables. This allows queries to be executed more efficiently, reducing response times and improving overall performance. Easier Maintenance: Normalization makes it easier to maintain the database by simplifying data structures and reducing the complexity of the data model. This makes it easier to modify and update the database as needed.","title":"30. What is Normalization and what are the advantages of it ?"},{"location":"sql/#31-what-are-the-database-design-basics","text":"A properly designed database provides you with access to up-to-date, accurate information A good database design is, therefore, one that: Divides your information into subject-based tables to reduce redundant data. Provides Access with the information it requires to join the information in the tables together as needed. Helps support and ensure the accuracy and integrity of your information. Accommodates your data processing and reporting needs. The design process consists of the following steps: Define the Purpose and Scope of the Database : Before you start designing a database, you need to determine its purpose and scope. What is the database going to be used for? Who is going to use it? What data will it store? What queries will it need to support? These questions will help you determine the requirements of your database. Identify the Entities and Relationships : The next step is to identify the entities and relationships that will be represented in the database. An entity is anything that can be represented in the database, such as a person, place, or thing. Relationships define how entities are related to one another. Create a Data Model : Once you have identified the entities and relationships, you can create a data model that represents them in a graphical format. There are several types of data models, including entity-relationship (ER) models, UML diagrams, and data flow diagrams. Normalize the Data : Normalization is the process of organizing the data in a database so that it is consistent and efficient. This involves breaking down larger tables into smaller ones and eliminating redundant data. Define the Data Types and Constraints : After normalizing the data, you need to define the data types and constraints for each field in the database. This includes specifying the data type (e.g., string, integer, date) and any constraints on that data (e.g., length limits, required fields, unique values). Create the Tables and Relationships : Using the data model and data types, you can now create the tables and relationships in the database. Tables represent the entities, and relationships define how they are related to one another. Populate the Database : Once the tables are created, you can populate the database with data. This can be done manually or through an automated process, depending on the size of the database. Test the Database : After populating the database, you need to test it to make sure it functions correctly. This includes running queries, updating data, and verifying that the database performs as expected. Cornerstones to take into consideration: Data Integrity - Ensuring the accuracy and consistency of the data. Scalability - Ensuring the database can handle increasing amounts of data and users. Security - Protecting the database from unauthorized access and ensuring data privacy. Performance - Ensuring the database operates efficiently and responds quickly to user requests. Maintainability - Ensuring the database is easy to maintain and update over time. Usability - Ensuring the database is easy to use and navigate for end-users. Flexibility - Ensuring the database can adapt to changing business needs and requirements.","title":"31. What are the database design basics ?"},{"location":"sql/#32-what-is-aggregate-functions-in-mysql","text":"An aggregate function is a function in SQL that performs a calculation on a set of values and returns a single value as the result. The set of values is typically a group of rows in a table, and the function is applied to one or more columns in the table List of aggregate functions in MySQL FUNCTION DESCRIPTION AVG() Return the average value of the argument BIT_AND() Return bitwise AND BIT_OR() Return bitwise OR BIT_XOR() Return bitwise XOR COUNT() Return a count of the number of rows returned COUNT(DISTINCT) Return the count of a number of different values GROUP_CONCAT() Return a concatenated string JSON_ARRAYAGG() Return result set as a single JSON array JSON_OBJECTAGG() Return result set as a single JSON object MAX() Return the maximum value MIN() Return the minimum value STD() Return the population standard deviation STDDEV() Return the population standard deviation STDDEV_POP() Return the population standard deviation STDDEV_SAMP() Return the sample standard deviation SUM() Return the sum VAR_POP() Return the population standard variance VAR_SAMP() Return the sample variance VARIANCE() Return the population standard variance Here are some examples of aggregate functions in SQL: -- Calculate the average salary of all employees SELECT AVG(salary) FROM employees; -- Calculate the total number of items in a store SELECT COUNT(*) FROM inventory; -- Count the number of distinct product categories in a store SELECT COUNT(DISTINCT category) FROM products; -- Concatenate the names of all employees in a department SELECT GROUP_CONCAT(name SEPARATOR ', ') FROM employees WHERE department='Sales'; -- Return the highest and lowest salary among all employees SELECT MAX(salary) as highest FROM employees; SELECT MIN(salary) as lowest FROM employees; -- Calculate the sum of all sales in a store SELECT SUM(sales) FROM store; -- Calculate the population standard deviation of product prices SELECT STDDEV_POP(price) FROM products; -- Calculate the sample variance of customer ages SELECT VAR_SAMP(age) FROM customers;","title":"32. What is aggregate functions in MySQL ?"},{"location":"sql/#33-what-is-difference-between-union-and-union-all-in-sql","text":"UNION merges the contents of two structurally-compatible tables into a single combined table. The difference between UNION and UNION ALL is that UNION will omit duplicate records whereas UNION ALL will include duplicate records. The performance of UNION ALL will typically be better than UNION, since UNION requires the server to do the additional work of removing any duplicates","title":"33. What is difference between UNION and UNION ALL in SQL ?"},{"location":"sql/#34-what-is-database","text":"A database is an organized collection of structured data that can be stored, easily accessed, managed, and retrieved digitally from a remote or local computer system.","title":"34. What is database ?"},{"location":"sql/#35-what-is-denormalization","text":"Denormalization is the opposite of normalization; redundant data is added to speed up complex queries that have multiple tables that need to be joined. Optimization of the read performance of a database is attempted by adding or grouping redundant copies of data.","title":"35. What is denormalization ?"},{"location":"sql/#36-what-is-data-warehouse","text":"A data warehouse is a large store of accumulated data, from a wide range of sources, within an organization. The data helps drive business decisions.","title":"36. What is data warehouse ?"},{"location":"sql/#37-what-is-difference-between-views-and-tables","text":"Views Tables A view is a virtual table that is extracted from a database A table is structured with a set number of columns and a boundless number of rows A view does not hold data itself A table contains data and stores it in databases A view is utilized to query certain information contained in a few distinct tables A table holds fundamental client information and cases of a characterized object In a view, we will get frequently queried information In a table, changing the information in the database changes the information that appears in the view","title":"37. What is difference between views and tables ?"},{"location":"sql/#38-what-is-sql-window-functions","text":"SQL window functions are a type of SQL function that allow you to perform calculations across a set of rows that are related to the current row. They are commonly used in analytic queries to calculate rankings, cumulative sums, moving averages, and other types of aggregations. Window functions are similar to the aggregation done in the GROUP BY clause. However, rows are not grouped into a single row, each row retains their separate identity. Window functions in SQL offer more flexibility, increased query efficiency, simplified code, and improved accuracy in data analysis, making them a powerful tool for performing complex calculations and analysis on your data within a single SQL query. Here is a list of some common window functions in SQL, along with examples: ROW_NUMBER() : assigns a unique integer value to each row in the result set. SELECT ROW_NUMBER() OVER() AS row_num, name, age FROM customers; RANK() : assigns a rank to each row based on its value relative to the other rows. SELECT RANK() OVER(ORDER BY salary DESC) AS rank, name, salary FROM employees; DENSE_RANK() : assigns a rank to each row based on its value relative to the other rows, but without any gaps in the ranking. SELECT DENSE_RANK() OVER(ORDER BY score DESC) AS dense_rank, name, score FROM students; SUM() , AVG() , MIN() , MAX() : calculate an aggregate value across the rows in the window. SELECT department, AVG(salary) OVER(PARTITION BY department) AS avg_salary FROM employees; LAG() and LEAD() : retrieve the value from a previous or subsequent row in the window. SELECT name, score, LAG(score, 1) OVER(ORDER BY score DESC) AS prev_score, LEAD(score, 1) OVER(ORDER BY score DESC) AS next_score FROM students; NTILE() : divides the result set into a specified number of groups, assigning a group number to each row. SELECT NTILE(4) OVER(ORDER BY salary DESC) AS quartile, name, salary FROM employees; FIRST_VALUE() and LAST_VALUE() : retrieve the first or last value in the window. SELECT name, score, FIRST_VALUE(score) OVER(ORDER BY score DESC) AS highest_score, LAST_VALUE(score) OVER(ORDER BY score DESC) AS lowest_score FROM students;","title":"38. What is SQL Window functions ?"},{"location":"sql/#39-what-is-order-of-operations-in-sql","text":"The order of operations in SQL, also known as operator precedence, determines the order in which the different operators and functions in a SQL statement are evaluated. The order of operations is important in ensuring that the SQL statement is evaluated correctly and produces the intended results. The following is the order of operations in SQL, from highest to lowest precedence: Parentheses: Expressions enclosed in parentheses are evaluated first. Unary operators: Unary operators such as NOT, +, and - are evaluated next. Multiplication, Division, and Modulus: These arithmetic operators are evaluated next, from left to right. Addition and Subtraction: These arithmetic operators are evaluated next, from left to right. Comparison operators: Comparison operators such as =, <>, <, <=, >, and >= are evaluated next. Logical operators: Logical operators such as AND, OR, and NOT are evaluated next. BETWEEN, IN, LIKE, and EXISTS: These operators are evaluated next. CASE expressions: CASE expressions are evaluated next. Aggregate functions: Aggregate functions such as COUNT, SUM, AVG, MAX, and MIN are evaluated next. Window functions: Window functions are evaluated next. DISTINCT, GROUP BY, and HAVING: These operators are evaluated next. SELECT: The SELECT statement is evaluated last.","title":"39. What is order of operations in SQL ?"},{"location":"sql/#40-how-many-type-of-key-does-sql-have","text":"Primary Key : A primary key is a unique identifier for each record in a table. It is used to ensure that each record can be identified uniquely, and it is often used as the basis for relationships with other tables. Foreign Key : A foreign key is a field in a table that refers to the primary key of another table. It is used to establish a relationship between two tables, and it ensures that data in one table can be linked to data in another table. Candidate Key : A candidate key is a field or combination of fields that can be used as a primary key for a table. It is an alternative key that can be used instead of the primary key. Composite Key : A composite key is a primary key that consists of two or more fields. It is used when no single field can uniquely identify a record in a table. Unique Key : A unique key is a field or combination of fields that ensures that each record in a table is unique. It is similar to a primary key, but it does not have to be used as the basis for relationships with other tables. Overall, keys are used to ensure data integrity and to establish relationships between tables in a database. They are a fundamental concept in SQL and are essential for managing and manipulating data effectively.","title":"40. How many type of key does SQL have ?"},{"location":"sql/#41-what-is-dbms","text":"DBMS stands for Database Management System. It is a software system that allows users to create, manage, and manipulate databases. A database is a collection of data that is organized and stored in a way that allows users to easily retrieve and update it. A DBMS provides a framework for creating, storing, and managing data in a structured format. It provides users with an interface to interact with the database and perform tasks such as adding, modifying, deleting, and retrieving data. Some popular examples of DBMS include MySQL, Oracle, Microsoft SQL Server, and MongoDB.","title":"41. What is DBMS ?"},{"location":"sql/#42-what-is-scalar-functions-in-sql","text":"Scalar functions in SQL are functions that take one or more input parameters and return a single value as the result. These functions operate on individual rows and can be used in SELECT statements, WHERE clauses, and other parts of SQL queries where a single value is expected. There are various types of scalar functions available in SQL, including: String functions: These functions perform operations on strings, such as concatenation, conversion, and searching. Date and time functions: These functions perform operations on dates and times, such as calculating the difference between two dates or adding a certain number of days to a date. Numeric functions: These functions perform operations on numeric values, such as rounding, truncation, and conversion. Conversion functions: These functions convert one data type to another, such as converting a string to a number or a date to a string. Examples of scalar functions in SQL include: LEN(): Returns the length of a string. DATEADD(): Adds a specified time interval to a date. ROUND(): Rounds a numeric value to a specified precision. CAST(): Converts a value from one data type to another. Scalar functions can be very useful in SQL queries, as they allow you to perform various calculations and manipulations on data without the need for complex programming logic.","title":"42. What is scalar functions in SQL ?"},{"location":"sql/#43-what-is-oltp","text":"OLTP stands for Online Transaction Processing, which is a type of computer system that manages and processes transaction-oriented applications, such as financial transactions, order processing, and inventory management. OLTP systems are designed to handle high volumes of small transactions in real-time or near real-time, typically with short response times. OLTP databases typically use normalized data structures to ensure data integrity, with tables organized around entities and relationships. These systems are optimized for data reads and writes, and are usually built on relational database management systems (RDBMS) like Oracle, SQL Server, or MySQL. OLTP systems are commonly used in businesses and organizations that need to process a high volume of transactions quickly and efficiently, such as banks, airlines, and e-commerce websites.","title":"43. What is OLTP ?"},{"location":"sql/#44-what-is-olap","text":"OLAP stands for Online Analytical Processing, which is a computer-based approach to analyzing data that allows users to access and analyze large sets of data from multiple perspectives. OLAP systems are designed for complex data analysis, and are optimized for querying and reporting. OLAP databases typically use denormalized data structures to provide fast and flexible access to data. OLAP systems allow users to query data using dimensions, measures, and hierarchies to analyze data across different dimensions, such as time, geography, and product lines. OLAP systems are commonly used in business intelligence and data analysis applications, where users need to quickly analyze large amounts of data to identify trends, patterns, and insights. They are typically built on multidimensional database management systems (MDBMS) like Microsoft Analysis Services, Oracle Essbase, or SAP BusinessObjects.","title":"44. What is OLAP ?"},{"location":"sql/#45-what-is-difference-between-olap-and-oltp","text":"OLTP (Online Transaction Processing) and OLAP (Online Analytical Processing) are two different types of computer-based systems designed to serve different purposes: Purpose : OLTP is designed to manage and process transaction-oriented applications in real-time or near real-time, while OLAP is designed for complex data analysis and querying. Data Structure : OLTP databases typically use normalized data structures to ensure data integrity, while OLAP databases typically use denormalized data structures to provide fast and flexible access to data. Usage : OLTP systems are optimized for data reads and writes, and are usually built on relational database management systems (RDBMS) like Oracle or SQL Server. OLAP systems are optimized for querying and reporting, and are typically built on multidimensional database management systems (MDBMS) like Microsoft Analysis Services or Oracle Essbase. Queries : OLTP systems typically involve simple queries, such as retrieving a single record, while OLAP systems involve complex queries that analyze data across multiple dimensions. Users : OLTP systems are designed for transactional users, such as bank tellers or customer service representatives, while OLAP systems are designed for analytical users, such as business analysts or data scientists. In summary, OLTP systems are designed for transaction processing and OLAP systems are designed for data analysis and querying.","title":"45. What is difference between OLAP and OLTP ?"},{"location":"sql/#46-what-is-pattern-matching-in-sql","text":"Pattern matching is a technique used in SQL to search for specific patterns or substrings within a larger string of text data. SQL provides several operators that can be used to perform pattern matching, including the LIKE operator and the regular expression functions. The LIKE operator is used to compare a string to a pattern and returns a boolean value indicating whether the string matches the pattern or not. The LIKE operator supports two wildcards: The percent sign (%) matches any sequence of zero or more characters. The underscore (_) matches any single character. For example, the following query retrieves all records where the value of the \"name\" column starts with the letter \"J\": SELECT * FROM table_name WHERE name LIKE 'J%'; In addition to the LIKE operator, SQL also provides regular expression functions such as REGEXP_LIKE , REGEXP_REPLACE , and REGEXP_INSTR , which allow for more advanced pattern matching capabilities. These functions can be used to search for patterns based on regular expressions, which are a powerful tool for matching complex patterns of text.","title":"46. What is pattern matching in SQL ?"},{"location":"sql/#47-what-is-common-table-expression-cte-in-sql","text":"CTEs work as virtual tables (with records and columns), created during the execution of a query, used by the query, and eliminated after query execution. Each SQL CTE is like a named query, whose result is stored in a virtual table (a CTE) to be referenced later in the main query. WITH london1_monthly_revenue AS ( SELECT EXTRACT(MONTH FROM date) as month, SUM(unit_price * quantity) AS revenue FROM sales WHERE EXTRACT(YEAR FROM date) = 2021 AND branch = 'London-1' GROUP BY 1 ), london2_monthly_revenue AS ( SELECT EXTRACT(MONTH FROM date) as month, SUM(unit_price * quantity) AS revenue FROM sales WHERE EXTRACT(YEAR FROM date) = 2021 AND branch = 'London-2' GROUP BY 1 ) SELECT l1.month, l1.revenue + l2.revenue AS london_revenue, l1.revenue AS london1_revenue, l2.revenue AS london2_revenue FROM london1_monthly_revenue l1, london2_monthly_revenue l2 WHERE l1.month = l2.month","title":"47. What is Common Table Expression (CTE) in SQL ?"},{"location":"sql/#coding","text":"","title":"CODING"},{"location":"sql/#1-how-to-insert-null-values-in-a-column-while-inserting-the-data","text":"To insert a NULL value into a column while inserting data into a table, you can use the keyword NULL in place of the actual value. For example, consider a table named \"employees\" with columns \"employee_id\", \"first_name\", \"last_name\", and \"email\". If you want to insert a NULL value into the email column, you can do it as follows: INSERT INTO employees (employee_id, first_name, last_name, email) VALUES (1, 'John', 'Doe', NULL); Another way to insert a NULL value into a column is to omit it from the column list in the INSERT statement. If you omit a column from the list, the database will insert a NULL value into the column by default. INSERT INTO employees (employee_id, first_name, last_name) VALUES (1, 'John', 'Doe');","title":"1. How to insert NULL values in a column while inserting the data?"},{"location":"sql/#2-how-can-you-select-unique-records-from-a-table","text":"To select unique records from a table, you can use the DISTINCT keyword in a SELECT statement. The DISTINCT keyword filters out duplicate values and returns only the unique values in the specified column or columns. For example, consider a table named \"employees\" with columns \"employee_id\", \"first_name\", \"last_name\", and \"department\". To select only the unique department names from the table, you can use the following query: SELECT DISTINCT department FROM employees; If you want to select unique records based on multiple columns, you can specify those columns in the SELECT statement, like this: SELECT DISTINCT column1, column2, column3 FROM table_name; NOTE : It's worth noting that using the DISTINCT keyword can have performance implications, especially on large tables. If you're working with a large dataset, you may want to consider other techniques such as grouping and aggregation to identify unique records.","title":"2. How can you select unique records from a table ?"},{"location":"sql/#3-regular-expression-querry","text":"Write a query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates. -- option 1 SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]'; -- option 2 SELECT DISTINCT CITY FROM STATION WHERE SUBSTR(CITY, 1, 1) IN ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');","title":"3. Regular Expression Querry"},{"location":"sql/#4-removing-duplicate-values","text":"Write a query that remove duplicate values from table -- prepare environment CREATE DATABASE family_db; USE family_db; CREATE TABLE family ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, age INT NOT NULL, gender ENUM('male', 'female') NOT NULL, relationship VARCHAR(20) NOT NULL ); INSERT INTO family (name, age, gender, relationship) VALUES ('John Smith', 45, 'male', 'father'), ('Jane Smith', 42, 'female', 'mother'), ('Bob Smith', 18, 'male', 'brother'), ('Sally Smith', 15, 'female', 'sister'), ('Tom Johnson', 55, 'male', 'grandfather'), ('Mary Johnson', 50, 'female', 'grandmother'), ('Jim Johnson', 28, 'male', 'uncle'), ('Karen Johnson', 25, 'female', 'aunt'), ('Mark Davis', 30, 'male', 'cousin'), ('Sarah Davis', 28, 'female', 'cousin'); Following code uses a self-join on the \"family\" table to compare each row with all other rows in the table, looking for duplicates based on the values of the name, age, gender, and relationship columns. The WHERE clause filters the results to only include rows where the ID of the first row is greater than the ID of the second row (to avoid deleting the original row), and where all other column values are identical. The DELETE statement then removes the duplicate row from the table. -- OPTION 1 (self-join) DELETE f1 FROM family f1, family f2 WHERE f1.id > f2.id AND f1.name = f2.name AND f1.age = f2.age AND f1.gender = f2.gender AND f1.relationship = f2.relationship; Instead of using a self-join, which can be slow for large tables, you can use a temporary table to store the distinct rows, and then replace the original table with the temporary table. -- OPTION 2 (temp table and distinct) -- Create a new temporary table with the same schema as the original table CREATE TEMPORARY TABLE tmp_family LIKE family; -- Insert the distinct rows from the original table into the temporary table INSERT INTO tmp_family SELECT DISTINCT * FROM family; -- Drop the original table: DROP TABLE family; -- Rename the temporary table to the original table name RENAME TABLE tmp_family TO family; This approach is faster and more efficient than using a self-join, as it only scans the original table once, and it avoids the overhead of deleting rows one by one. However, it may require more disk space to create the temporary table, so make sure you have enough free space on your server before running this code.","title":"4. Removing Duplicate Values"},{"location":"sql/#5-what-is-the-output-of-following-statements-and-why","text":"-- 1st statement select '123ABC' * 3; -- 2nd statement select 'ABC123' * 3; To make the multiplication with 3 MySQL automatically converts the string 123 into a number.But conversion to a number starts from left to right. If the conversion is not possible the result is 0 Result of select '123ABC' * 3; is 369 but result of select 'ABC123' * 3; is 0","title":"5. What is the output of following statements and why ?"}]}